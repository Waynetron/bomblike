{"version":3,"sources":["containers.js","entity/Entity.js","constants.js","map/Map.js","math.js","map/map-util.js","entity/enemies.js","entity/behaviours.js","entity/weapons.js","entity/entities.js","Info.js","WinGraphic.js","map/map-generation.js","turn.js","App.js","serviceWorker.js","index.js"],"names":["shake","css","grow","centered","AppContainer","styled","div","win","lose","getBackgroundColor","MapAndInfoContainer","props","undefined","MenuContainer","getColour","char","getBackgroundColour","getZIndex","solid","Container","attrs","x","y","style","left","top","zIndex","color","Inner","health","opacity","width","CELL_SIZE","height","backgroundColor","getBumpClass","status","attacking","getShakeClass","Cell","entity","hoverStart","position","className","onMouseEnter","getDisplayChar","MapContainer","Map","entities","hoverStop","MAP_WIDTH","MAP_HEIGHT","onMouseLeave","map","key","id","UP","DOWN","LEFT","RIGHT","add","a","b","subtract","turn","angle","direction","rotated","rotate","shuffle","original","shuffled","i","length","j","Math","floor","random","getEntitiesAt","filter","isEqual","getEntitiesAtPositions","positions","flat","isAdjacentEdge","getAdjacentPositions","getPositionsInDirection","startPosition","distance","scaledDirection","offsetPosition","push","reverse","isCharInDirection","entitiesAtPosition","isWalkable","entitiesAtPostion","some","gooblini","makeEntity","behaviours","walkInALine","faceWalkable","attackPlayer","name","description","charger","facing","pursuePlayerInLineOfSight","eater","eatBomb","pursueBombInLineOfSight","ghostSpawner","spawnGhostOnDeath","visible","getRandomEnemy","level","available","isAttackable","containsAttackable","find","explodeOnDeath","radius","power","attackPositions","spawnPositions","firstSolidIndex","findIndex","slice","attackActions","type","value","target","cost","spawnActions","flame","speed","pursuePlayerThroughWalls","attackSelf","player","findPlayer","force","adjacent","bomb","makeBombBag","bagProps","bombProps","extraBagProps","capacity","stats","timer","use","starterBombBag","ceil","weapons","points","numTraits","plentifulCapacity","largeRadius","veryLargeRadius","shortFuse","longFuse","availableTraits","traits","trait","_id","console","error","weapon","alive","actions","actionsPerTurn","trail","wall","breakable","InfoBox","StatsContainer","Stats","capacityText","getCapacityText","powerText","getPowerText","radiusText","getRadiusText","timerText","text","getTimerText","Info","hovered","events","entitiesAtPlayer","stairs","killer","playerKiller","getInfoToDisplay","HugeText","p","WinGraphic","distanceBetween","x1","y1","generateLevel","emptyEntities","isAdjacentPlayer","adjPosition","unbreakableWall","emptyEntity","shuffledEmptyEntities","maxThings","numBreakableWalls","min","remainingRandomSpots","numHoles","pop","makeRoomWithPlayerAndWalls","numEnemies","enemy","spawner","walls","sort","farthestWalls","shuffledWalls","staircaseDown","upOrDown","staircase","weaponFactory","totalTurns","move","newPosition","upcomingEntities","upcoming","placeBomb","newBomb","owner","performActions","newEvents","action","actionPoints","armour","defense","changeLevel","performTurn","prevPosition","behaviour","initialPlayer","initialEntities","App","useState","setLevel","setEntities","setEvents","setHovered","startGame","backToTitle","useCallback","nextLevel","handleKeyDown","event","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","keyToDirection","primary","toLowerCase","wait","restart","remove","pickUpWeapon","Boolean","canEnterStairs","everythingElse","remainingEntities","newEntities","performTurns","useEffect","window","addEventListener","removeEventListener","onClick","e","hoverEnd","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wpEAEA,IAAMA,EAAQC,YAAH,KAqBLC,EAAOD,YAAH,KAUJE,EAAWF,YAAH,KAiBDG,EAAeC,IAAOC,IAAV,IACrBH,GACkB,mBAbK,SAACI,EAAKC,GAC/B,OAAID,EACK,QAELC,EACK,UAGF,QAK8BC,CAAjB,EAAEF,IAAF,EAAOC,SAOhBE,EAAsBL,IAAOC,IAAV,IAM5BN,EACAE,GACgB,SAAAS,GAAK,OAAIA,EAAMX,MAAQ,mBAAgBY,KAG9CC,EAAgBR,IAAOC,IAAV,IACtBH,GAKmBE,IAAOC,IAAV,K,mmBCvEpB,IAAMQ,EAAY,SAACC,GAgBjB,MAfgB,CACd,IAAK,UACL,IAAK,QACL,IAAK,QACL,IAAK,UACL,SAAK,UACL,EAAK,UACL,OAAK,UACL,SAAK,UACL,EAAK,QACL,SAAK,QACL,SAAK,UACL,OAAK,UAGQA,IAAS,UAGpBC,EAAsB,SAACD,GAO3B,MANgB,CACd,IAAK,QACL,IAAK,UACL,EAAK,YACL,SAAK,SAEQA,IAAS,eAGpBE,EAAY,SAACC,EAAOH,GACxB,MAAa,SAATA,EACK,EAEI,WAATA,EACK,EAEI,MAATA,EACK,EAEI,MAATA,EACK,EAGLG,EACK,EAGF,GAGHC,EAAYd,IAAOC,IAAIc,OAAM,gBAAGC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAGJ,EAAT,EAASA,MAAOH,EAAhB,EAAgBA,KAAhB,MAA4B,CAC7DQ,MAAO,CACLC,KCzDqB,GDyDfH,EAAgB,KACtBI,IC1DqB,GD0DhBH,EAAgB,KACrBI,OAAQT,EAAUC,EAAOH,GACzBY,MAAOb,EAAUC,OALHV,CAAH,KAaTuB,EAAQvB,IAAOC,IAAIc,OAAM,gBAAGL,EAAH,EAAGA,KAAMc,EAAT,EAASA,OAAT,MAAuB,CACpDN,MAAO,CACLO,QAAkB,SAATf,EAAe,OAAf,UAA2B,GAAKc,EAAhC,KACTE,MAAOC,OACPC,OAAQD,OACRE,gBAAiBlB,EAAoBD,OAL3BV,CAAH,KAiCL8B,EAAe,SAACC,GACpB,GAAIA,EAAOC,UAAW,CAAC,IAAD,EACLD,EAAOC,UAAfhB,EADa,EACbA,EAAGC,EADU,EACVA,EACV,GAAID,EAAI,EACN,MAAO,YAET,GAAIA,EAAI,EACN,MAAO,aAET,GAAIC,EAAI,EACN,MAAO,UAET,GAAIA,EAAI,EACN,MAAO,YAIX,MAAO,IAGHgB,EAAgB,SAACvB,EAAMc,GAC3B,MAAa,MAATd,GAA2B,IAAXc,EACX,QAGF,IAwCMU,EAhBF,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,OAAiC,IAAzBC,kBAAyB,MAAZ,aAAY,EACvC1B,EAAiDyB,EAAjDzB,KADuC,EACUyB,EAA3CE,SAAWrB,EADsB,EACtBA,EAAGC,EADmB,EACnBA,EAAIJ,EAAyBsB,EAAzBtB,MAAOkB,EAAkBI,EAAlBJ,OAAQP,EAAUW,EAAVX,OAC9C,OACE,kBAACV,EAAD,CAAWE,EAAGA,EAAGC,EAAGA,EAAGJ,MAAOA,EAAOH,KAAMA,GACzC,kBAACa,EAAD,CACEb,KAAMA,EACNc,OAAQW,EAAOX,OACfc,UAAS,UAAKR,EAAaC,GAAlB,YAA6BE,EAAcvB,EAAMc,IAC1De,aAAc,kBAAMH,EAAWD,KAE/B,2BA/Be,SAACzB,EAAMc,GAE5B,MAAa,MAATd,EACK,IAGI,MAATA,EACK,IAGI,MAATA,EACKc,EAGI,WAATd,EACK,GAGFA,EAaG8B,CAAe9B,EAAMc,O,wJE3JjC,IAAMiB,EAAezC,IAAOC,IAAV,KACP,SAAAK,GAAK,OAAIA,EAAMoB,SACd,SAAApB,GAAK,OAAIA,EAAMsB,SACZD,OAsBAe,EAlBH,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,SAAUP,EAA2B,EAA3BA,WAAYQ,EAAe,EAAfA,UAClC,OACE,kBAACH,EAAD,CACEf,MAAOmB,IACPjB,OAAQkB,IACRC,aAAcH,GAEbD,EAASK,KAAI,SAAAb,GAAM,OAClB,kBAAC,EAAD,CACEA,OAAQA,EACRc,IAAKd,EAAOe,GACZd,WAAYA,S,eCrBRe,EAA0B,CAACnC,EAAG,EAAGC,GAAI,GAAjCmC,EAAqC,CAACpC,EAAG,EAAGC,EAAG,GAAzCoC,EAA6C,CAACrC,GAAI,EAAGC,EAAG,GAAlDqC,EAAsD,CAACtC,EAAG,EAAGC,EAAG,GACjFsC,EAAM,SAACC,EAAGC,GAAJ,MAAW,CAACzC,EAAGwC,EAAExC,EAAIyC,EAAEzC,EAAGC,EAAGuC,EAAEvC,EAAIwC,EAAExC,IAC3CyC,EAAW,SAACF,EAAGC,GAAJ,MAAW,CAACzC,EAAGwC,EAAExC,EAAIyC,EAAEzC,EAAGC,EAAGuC,EAAEvC,EAAIwC,EAAExC,IAEhD0C,EAAO,SAACC,EAAOC,GAAe,IAClC7C,EAAQ6C,EAAR7C,EAAGC,EAAK4C,EAAL5C,EACJ6C,EAAUC,YAAOH,EAAO,CAAC5C,EAAGC,IAFM,cAGvB6C,EAHuB,GAIxC,MAAO,CAAC9C,EAJgC,KAIzBC,EAJyB,OAO7B+C,EAAU,SAACC,GAEtB,IADA,IAAMC,EAAQ,YAAOD,GACZE,EAAID,EAASE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADI,EAEf,CAACD,EAASG,GAAIH,EAASC,IAAnDD,EAASC,GAFkC,KAE9BD,EAASG,GAFqB,KAI9C,OAAOH,G,OCfIO,EAAgB,SAACpC,EAAUM,GAAX,OAC3BA,EAAS+B,QAAO,SAAAvC,GAAM,OAAIwC,kBAAQxC,EAAOE,SAAUA,OAExCuC,EAAyB,SAACC,EAAWlC,GAAZ,OACpCkC,EAAU7B,KAAI,SAAAX,GAAQ,OAAIoC,EAAcpC,EAAUM,MAAWmC,QAGlDC,EAAiB,SAAC,GAAD,IAAE/D,EAAF,EAAEA,EAAGC,EAAL,EAAKA,EAAL,OACtB,IAAND,GAAiB6B,IAAN7B,GAA6B,IAANC,GAAiB6B,IAAN7B,GAElC+D,EAAuB,SAAC3C,GAAD,MAAc,CAChDkB,EAAIJ,EAAId,GAAWkB,EAAIH,EAAMf,GAAWkB,EAAIF,EAAMhB,GAAWkB,EAAID,EAAOjB,KAG7D4C,EAA0B,SAACpB,EAAWqB,EAAeC,GAEhE,IADA,IAAMN,EAAY,GACXM,EAAW,GAAG,CACnB,IAAMC,EAAkB,CAACpE,EAAG6C,EAAU7C,EAAImE,EAAUlE,EAAG4C,EAAU5C,EAAIkE,GAC/DE,EAAiB9B,EAAI2B,EAAeE,GAC1CP,EAAUS,KAAKD,GACfF,GAAY,EAEd,OAAON,EAAUU,WAGNC,EAAoB,SAAC9E,EAAMmD,EAAWqB,EAAeC,EAAUxC,GAC1E,IAAMkC,EAAYI,EAAwBpB,EAAWqB,EAAeC,GADmB,uBAEvF,YAAuBN,EAAvB,+CAAkC,CAAC,IAAxBxC,EAAuB,QAC1BoD,EAAqBhB,EAAcpC,EAAUM,GADnB,uBAEhC,YAAqB8C,EAArB,+CAAyC,CAAC,IAA/BtD,EAA8B,QACvC,GAAIA,EAAOzB,OAASA,EAClB,OAAO,EAEJ,GAAIyB,EAAOtB,MACd,OAAO,GAPqB,oFAFqD,kFAavF,OAAO,GAGI6E,GAAa,SAACrD,EAAUM,GACnC,IAAMgD,EAAoBlB,EAAcpC,EAAUM,GAGlD,OAAiC,IAA7BgD,EAAkBvB,SAKlBuB,EAAkBC,MAAK,SAAAzD,GAAM,OAAIA,EAAOtB,U,QCjDjCgF,GAAW,SAACvF,GACvB,OAAOwF,GAAW,aAChBpF,KAAM,IACNG,OAAO,EACPkF,WAAY,CAACC,GAAaC,GAAcC,IACxCC,KAAM,WACNC,YAAa,sCACV9F,KAIM+F,GAAU,SAAC/F,GAAW,IAAD,EAChC,OAAOwF,GAAW,gBAChBpF,KAAM,IACNyF,KAAM,UACNtF,OAAO,EACPyF,OAAQ,CAACtF,EAAG,EAAGC,EAAG,GAClB8E,WAAY,CAACQ,GAA2BP,GAAaE,KALtC,sBAMT,WANS,6BAOF,yCAPE,GAQZ5F,KAIMkG,GAAQ,SAAClG,GACpB,OAAOwF,GAAW,aAChBpF,KAAM,IACNG,OAAO,EACPkF,WAAY,CAACU,GAASC,GAAyBR,IAC/CC,KAAM,YACNC,YAAa,sBACV9F,KAiBMqG,GAAe,SAACrG,GAC3B,OAAOwF,GAAW,aAChBpF,KAAM,IACNG,OAAO,EACPW,OAAQ,EACRuE,WAAY,CAACa,IACbT,KAAM,gBACNC,YAAa,GACbS,SAAS,GACNvG,KAIMwG,GAAiB,SAACC,EAAOzG,GACpC,IAQM0G,EARS,CACb,CAACnB,IACD,CAACA,GAAUQ,IACX,CAACR,GAAUQ,GAASG,IACpB,CAACX,GAAUQ,GAASG,IACpB,CAACX,GAAUQ,GAASG,KAGGO,EAAQ,GAEjC,OAAOC,EADO1C,KAAKC,MAAMD,KAAKE,SAAWwC,EAAU5C,SAC3B9D,IClEpB2G,GAAe,SAAC9E,GACpB,MAAoB,WAAhBA,EAAOzB,SAGPyB,EAAOtB,OAAyB,MAAhBsB,EAAOzB,OAOvBwG,GAAqB,SAAC7E,EAAUM,GACpC,OAAO8B,EAAcpC,EAAUM,GAAUwE,KAAKF,KAGnCG,GAAiB,SAACjF,EAAQQ,GAAc,IAC5C0E,EAAiBlF,EAAjBkF,OAAQC,EAASnF,EAATmF,MAEf,GADAnF,EAAOX,QAAU,EACbW,EAAOX,OAAS,EAClB,MAAO,GAKP,IAHA,IAAM+F,EAAkB,CAACpF,EAAOE,UAC1BmF,EAAiB,CAACrF,EAAOE,UAE/B,MAAwB,CAACc,EAAIC,EAAMC,EAAMC,GAAzC,eAAiD,CAA5C,IACGuB,EAAYI,EADA,KACmC9C,EAAOE,SAAUgF,GAChEI,EAAkB5C,EAAU6C,WAAU,SAAArF,GAAQ,OAAI6E,GAAmB7E,EAAUM,OAC5D,IAArB8E,GACFF,EAAgBjC,KAAKT,EAAU4C,IAC/BD,EAAelC,KAAf,MAAAkC,EAAc,YAAS3C,EAAU8C,MAAM,EAAGF,EAAkB,MAG5DD,EAAelC,KAAf,MAAAkC,EAAc,YAAS3C,IAI3B,IAEM+C,EAFmBhD,EAAuB2C,EAAiB5E,GAE1BK,KAAI,SAAAb,GAAM,MAC/C,CAAC0F,KAAM,SAAUC,MAAOR,EAAOS,OAAQ5F,EAAQ6F,KAAM,MAIjDC,EAAeT,EAAexE,KAAI,SAAAX,GAAQ,MAC9C,CAACwF,KAAM,QAASC,MAAO,EAAG3F,OAAQ+F,GAAM,CAAC7F,aAAY2F,KAAM,MAE7D,MAAM,GAAN,mBAAWJ,GAAX,YAA6BK,KAIpBrB,GAAoB,SAACzE,EAAQQ,GAExC,GADAR,EAAOX,QAAU,EACbW,EAAOX,OAAS,EAClB,MAAO,GACD,IDzBalB,EC0BX+B,EAAaF,EAAbE,SACR,MAAO,CAAC,CAACwF,KAAM,QAASC,MAAO,EAAG3F,QD3Bf7B,EC2B8B,CAAC+B,YD1B7CyD,GAAW,aAChBpF,KAAM,IACNG,OAAO,EACPW,OAAQ,GACR2G,MAAO,OACPpC,WAAY,CAACqC,GAA0BlC,IACvCC,KAAM,eACNC,YAAa,iBACV9F,KCkB2D0H,KAAM,KAI3DK,GAAa,SAAClG,EAAQQ,GACjC,MAAO,CAAC,CAACkF,KAAM,SAAUC,MAAO,EAAGC,OAAQ5F,EAAQ6F,KAAM,KAG9ChC,GAAc,SAAC7D,EAAQQ,GAElC,MAAO,CAAC,CAACkF,KAAM,OAAQhE,UADJ1B,EAAXmE,OACkC0B,KAAM,KAGrCzB,GAA4B,SAACpE,EAAQQ,GAChD,cAAwB,CAACQ,EAAIC,EAAMC,EAAMC,GAAzC,eAAiD,CAA5C,IAAMO,EAAS,KAElB,GAAI2B,EAAkB,IAAK3B,EAAW1B,EAAOE,SAD/B,GACgDM,GAC5D,MAAO,CACL,CAACkF,KAAM,OAAQhE,YAAWmE,KAAM,GAChC,CAACH,KAAM,OAAQhE,YAAWmE,KAAM,IAKtC,MAAO,IAGItB,GAA0B,SAACvE,EAAQQ,GAC9C,cAAwB,CAACQ,EAAIC,EAAMC,EAAMC,GAAzC,eAAiD,CAA5C,IAAMO,EAAS,KAElB,GAAI2B,EAAkB,IAAK3B,EAAW1B,EAAOE,SAD/B,GACgDM,GAC5D,MAAO,CACL,CAACkF,KAAM,OAAQhE,YAAWmE,KAAM,GAChC,CAACH,KAAM,OAAQhE,YAAWmE,KAAM,IAKtC,MAAO,IAGII,GAA2B,SAACjG,EAAQQ,GAC/C,IAAM2F,EAASC,GAAW5F,GACpB3B,EAAIsH,EAAOjG,SAASrB,EAAImB,EAAOE,SAASrB,EAAI,GAAK,EACjDC,EAAIqH,EAAOjG,SAASpB,EAAIkB,EAAOE,SAASpB,EAAI,GAAK,EAIvD,MAAO,CAAC,CAAC4G,KAAM,OAAQhE,UAFLS,KAAKE,SAAW,GAAM,CAACxD,EAAG,EAAGC,EAAGA,GAAK,CAACD,EAAGA,EAAGC,EAAG,GAE/B+G,KAAM,EAAGQ,OAAO,KAGvCvC,GAAe,SAAC9D,EAAQQ,GAQnC,IARiD,IACzC2D,EAAWnE,EAAXmE,OAOR,MAFmB,CAACA,EAAQ3C,GAAM,GAAI2C,GAAS3C,EAAK,GAAI2C,GAAS3C,EAAK,IAAK2C,IAE3E,eAAoC,CAA/B,IAAMzC,EAAS,KACZxB,EAAWkB,EAAIM,EAAW1B,EAAOE,UACvC,GAAIqD,GAAWrD,EAAUM,GACvB,MAAO,CAAC,CAACkF,KAAM,OAAQhE,YAAWmE,KAAM,IAK5C,MAAO,IAGI9B,GAAe,SAAC/D,EAAQQ,GACnC,IACM2F,EADY7D,EAActC,EAAOE,SAAUM,GACxBwE,MAAK,SAAAhF,GAAM,MAAoB,MAAhBA,EAAOzB,QAE/C,OAAI4H,EACK,CACL,CAACT,KAAM,SAAUC,MAAO,EAAGC,OAAQO,EAAQN,KAAM,IAI9C,IAGIvB,GAAU,SAACtE,EAAQQ,GAC9B,IAAM8F,EAAWzD,EAAqB7C,EAAOE,UADF,uBAE3C,YAAuBoG,EAAvB,+CAAiC,CAAC,IAAvBpG,EAAsB,QAEzBqG,EADmBjE,EAAcpC,EAAUM,GACnBwE,MAAK,SAAAhF,GAAM,MAAoB,MAAhBA,EAAOzB,QACpD,GAAIgI,EAGF,MAAO,CACL,CAACb,KAAM,MAAOE,OAAQW,EAAMV,KAAM,GAClC,CAACH,KAAM,OAAQhE,UAJCH,EAASrB,EAAUF,EAAOE,UAIhB2F,KAAM,KAVK,kFAe3C,MAAO,IClKHW,GAAc,SAACC,EAAUC,EAAWC,GAuBxC,OAtBehD,GAAW,aACxBpF,KAAM,OACNmH,KAAM,SACNhH,OAAO,EACPW,OAAQ,IACRuH,SAAUH,EAASG,UAAY,EAC/B3C,YAAa,sBACb4C,MAAO,CACL3B,OAAQwB,EAAUxB,OAClBC,MAAOuB,EAAUvB,MACjByB,SAAUH,EAASG,SAEnBE,MAAOJ,EAAUrH,QAEnB0H,IAAK,SAAC/G,GAAD,MAAa,CAChB0F,KAAM,aACNG,KAAM,EACNU,KAAMA,GAAK,eAAIG,EAAL,CAAgBxG,SAAUF,EAAOE,eAE1CyG,KAyCMK,GAAiB,SAACpC,GAAuB,IAAhBzG,EAAe,uDAAP,GACtCsI,EAAW,CACfG,SAAU,EACV3C,YAAa,uBAETyC,EAAY,CAChBxB,OAAQ/C,KAAK8E,KAAK9E,KAAKE,SAAWuC,GAClCvF,OAAQ,EACR8F,MAAO,GAET,OAAOqB,GAAYC,EAAUC,EAAWvI,IAGpC+I,GAAU,CA7CiB,SAACtC,GAAuB,IAAhBzG,EAAe,uDAAP,GACzCgJ,EAAyB,EAAhBhF,KAAKE,SAAeuC,EAC/BwC,EAAY,EACZD,EAAS,EACXC,EAAY,EACHD,EAAS,IAClBC,EAAY,GAGd,IAAMC,EAAoB,CAACT,SAAU,GAC/BU,EAAc,CAACpC,OAAQ,GACvBqC,EAAkB,CAACrC,OAAQ,GAC3BsC,EAAY,CAACnI,OAAQ,GACrBoI,EAAW,CAACpI,OAAQ,GAEtBoH,EAAW,GACXC,EAAY,GAEVgB,EAAkB7F,EAAQ,CAACyF,EAAaC,EAAiBC,EAAWC,IACpEE,EAASD,EAAgBlC,MAAM,EAAG4B,GAnBc,uBAoBtD,YAAoBO,EAApB,+CAA4B,CAAC,IAAlBC,EAAiB,QACtBA,IAAUP,EACZZ,EAAQ,eAAOA,EAAP,GAAoBmB,GAG5BlB,EAAS,eAAOA,EAAP,GAAqBkB,IAzBoB,kFA6BtD,OAAOpB,GAAYC,EAAUC,EAAWvI,KC1DtC0J,GAAM,EAGGlE,GAAa,SAACxF,GAIzB,OAHKA,EAAM+B,UAAU4H,QAAQC,MAAM,wCAAyC5J,GACxEA,EAAM4C,IAAI+G,QAAQC,MAAM,+CAErB,aACLhH,GAPgB8G,KAQhB7D,KAAM,QACNzF,KAAM,IACNyJ,OAAQ,KACR7D,OAAQ,CAACtF,EAAG,EAAGC,EAAG,GAClBmJ,OAAO,EACPvJ,OAAO,EACPkF,WAAY,GACZsE,QAAS,GACTC,eAAgB,EAChBvI,OAAQ,GACRP,OAAQ,EACR4E,YAAa,GACbS,SAAS,GACNvG,IAIMiI,GAAa,SAAA5F,GAAQ,OAAIA,EAASwE,MAAK,SAAAhF,GAAM,MAAoB,MAAhBA,EAAOzB,SAwBxDgI,GAAO,SAACpI,GACnB,OAAOwF,GAAW,aAChBpF,KAAM,IACNyF,KAAM,OACNtF,OAAO,EACPkF,WAAY,CAACqB,IACbhB,YAAa,0CACb5E,OAAQ,EACR8F,MAAO,EACPD,OAAQ,GACL/G,KAeM4H,GAAQ,SAAC5H,GACpB,OAAOwF,GAAW,aAChBpF,KAAM,SACNyF,KAAM,QACNtF,OAAO,EACPkF,WAAY,CAACsC,IACb7G,OAAQ,GACLlB,KAIMiK,GAAQ,SAACjK,GACpB,OAAOwF,GAAW,aAChBpF,KAAM,OACNyF,KAAM,QACNtF,OAAO,EACPkF,WAAY,CAACsC,IACb7G,OAAQ,GACLlB,KAcMkK,GAAO,SAAClK,GAA6B,IAAtBmK,IAAqB,yDAC/C,OAAO3E,GAAW,aAChBpF,KAAM+J,EAAY,IAAM,IACxBtE,KAAM,iBACN3E,OAAQiJ,EAAY,EAAI,IACxB5J,OAAO,EACPuF,YAAY,mBAAD,OAAsBqE,EAAsC,GAA1B,0BAC1CnK,K,qrBC/GP,IAAMoK,GAAU1K,IAAOC,IAAV,MAKF,SAAAK,GAAK,OAAIA,EAAMoB,SAiBpBiJ,GAAiB3K,IAAOC,IAAV,MAuCd2K,GAAQ,SAAC,GAAc,IAAbzI,EAAY,EAAZA,OACd,IAAKA,IAAWA,EAAO6G,MAErB,OAAO,kBAAC2B,GAAD,KAAgB,6BAHC,MAMiBxI,EAAO6G,MAA1CD,EANkB,EAMlBA,SAAUzB,EANQ,EAMRA,MAAOD,EANC,EAMDA,OAAQ4B,EANP,EAMOA,MAE3B4B,EAlCgB,SAAC9B,GAEvB,MADgB,CAAC,GAAI,QAAS,aACfA,EAAW,GAgCL+B,CAAgB/B,GAC/BgC,EA9Ba,SAACzD,GAEpB,MADgB,CAAC,KAAM,WAAY,gBAAiB,wBACrCA,EAAQ,GA4BL0D,CAAa1D,GACzB2D,EA1Bc,SAAC5D,GAErB,MADgB,CAAC,KAAM,eAAgB,oBAAqB,4BAC7CA,EAAS,GAwBL6D,CAAc7D,GAC3B8D,EAtBa,SAAClC,GACpB,IAAImC,EAAO,KAOX,OANc,IAAVnC,IACFmC,EAAO,cAEK,IAAVnC,IACFmC,EAAO,aAEFA,EAcWC,CAAapC,GAE/B,OACA,kBAAC0B,GAAD,KACE,2BACE,mCACE,IACDE,GAAgB,0BAAMvI,UAAU,SAASuI,EAAzB,KACf,IACF,0CACE,KACAE,GAAaE,GAAcE,IAAc,sCACzC,IACDJ,GAAa,0BAAMzI,UAAU,SAASyI,EAAzB,KACZ,IACDE,GAAc,0BAAM3I,UAAU,SAAS2I,EAAzB,KACb,IACDE,GAAa,0BAAM7I,UAAU,SAAS6I,EAAzB,KACZ,KACAJ,GAAaE,GAAcE,IAAc,0CA2ElCG,GARF,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,QAAS5I,EAAiC,EAAjCA,SAAUzC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,KAAMqL,EAAY,EAAZA,OAC3C,OACE,kBAACd,GAAD,CAAShJ,MAAOmB,KA/DK,SAAC0I,EAAS5I,EAAUzC,EAAKC,EAAMqL,GACtD,IAAMlD,EAASC,GAAW5F,GACpB8I,EAAmBnD,EAAS7D,EAAc6D,EAAOjG,SAAUM,GAAY,GACvE+I,EAASD,EAAiBtE,MAAK,SAAAhF,GAAM,MAAoB,MAAhBA,EAAOzB,QAChDyJ,EAASsB,EAAiBtE,MAAK,SAAAhF,GAAM,MAAoB,WAAhBA,EAAO0F,QAEtD,IAAKsC,IAAWuB,IAAWH,IAAYrL,IAAQC,EAC7C,OAAO,KAGT,IAAMgC,EAASgI,GAAUuB,GAAUH,EAEnC,GAAIpL,EAAM,CACR,IAAMwL,EAASH,EAAOI,aACtB,OACE,oCACE,mDAAwB,0BAAMtJ,UAAU,OAAOqJ,EAASA,EAAOxF,KAAO,cACtE,4CAAiB,0BAAM7D,UAAU,OAAhB,SAKvB,OAAIpC,EAEA,oCACE,oEACA,4CAAiB,0BAAMoC,UAAU,OAAhB,SAMnB6H,EAEA,oCACE,kBAAC,GAAD,CAAOhI,OAAQA,IACf,mCAAQ,0BAAMG,UAAU,OAAhB,SAKLoJ,EAEL,oCACE,2BAAIvJ,EAAOiE,aAAe,IAC1B,sCAAW,0BAAM9D,UAAU,OAAhB,SAOb,oCACGiJ,EAAQvC,MACL,kBAAC,GAAD,CAAO7G,OAAQoJ,IACf,2BAAIA,EAAQnF,aAAe,KAShCyF,CAAiBN,EAAS5I,EAAUzC,EAAKC,EAAMqL,K,oOCpKtD,IFoCuBlL,GEpCjBwL,GAAW9L,IAAO+L,EAAV,MAkBCC,GANI,WACjB,OAAO,kBAACF,GAAD,KACL,0BAAMxJ,UAAU,UAAhB,KADK,MC0CH2J,GAAkB,SAAC,EAAD,GAAqC,IAAhCC,EAA+B,EAAlClL,EAAUmL,EAAwB,EAA3BlL,EAC/B,OAAQiL,EADkD,EAAlBlL,GACpBmL,EADsC,EAAXlL,IAIpCmL,GAAgB,SAACrF,EAAOuB,GAOnC,IANA,IAAM3F,EAvDkC,SAAC2F,GAIzC,IAHA,IAAM3F,EAAW,CAAC2F,GACZ+D,EAAgB,GAEbrL,EAAI,EAAGA,EVXO,EUWQA,GAAK,EAClC,IADsC,IAAD,WAC5BC,GACP,IAAMoB,EAAW,CAACrB,IAAGC,KAErB,GAAI0D,kBAAQtC,EAAUiG,EAAOjG,UAC3B,iBAGF,IHWgB/B,EGVVgM,EADmBtH,EAAqBsD,EAAOjG,UACX8E,MAAK,SAAAoF,GAAW,OAAI5H,kBAAQtC,EAAUkK,MAEhF,GAAIxH,EAAe1C,IAAcrB,EAAI,IAAM,GAAKC,EAAI,IAAM,EAAI,CAC5D,IAAMuL,EAAkBhC,GAAK,CAACnI,aAAW,GACzCM,EAAS2C,KAAKkH,QAGX,IAAKF,EAAkB,CAC1B,IAAMG,GHEQnM,EGFY,CAAC+B,YHG1ByD,GAAW,aAChBpF,KAAM,OACNG,OAAO,GACJP,KGLC+L,EAAc/G,KAAKmH,KAjBdxL,EAAI,EAAGA,EVXM,EUWUA,GAAK,EAAG,EAA/BA,GAgCX,IAVA,IHgCmBX,EGhCfoM,EAAwB1I,EAAQqI,GAG9BM,EAAYN,EAAcjI,OAAS,GAGnCwI,EAAoBtI,KAAKuI,IAAIvI,KAAKE,UAAYmI,EAAY,GADtC,EAC8DA,GAClFG,EAAuBH,EAAYC,EACnCG,EAAWzI,KAAKuI,IAAIvI,KAAKE,SAAWsI,EAAuB,EAAG,GAE3D3I,EAAI,EAAGA,EAAIyI,EAAmBzI,GAAK,EAAG,CAC7C,IAAM9B,EAAWqK,EAAsBM,MAAM3K,SAC5CM,EAAS2C,KAAKkF,GAAK,CAACnI,aAAW,IAGlC,IAAK,IAAI8B,EAAI,EAAGA,EAAI4I,EAAU5I,GAAK,EAAG,CACpC,IAAM9B,EAAWqK,EAAsBM,MAAM3K,SAC5CM,EAAS2C,MHeOhF,EGfG,CAAC+B,YHgBhByD,GAAW,aAChBpF,KAAM,SACNyF,KAAM,OACNtF,OAAO,EACPuF,YAAa,uBACb5E,OAAQ,KACLlB,MGnBL,MAAM,GAAN,OAAWqC,EAAX,YAAwB+J,IAQPO,CAA2B3E,GAGtC+D,EAAgB1J,EAAS+B,QAAO,SAAAvC,GAAM,MAAoB,SAAhBA,EAAOzB,QACnDgM,EAAwB1I,EAAQqI,GAC9Ba,EAAa5I,KAAK8E,KAAa,KAARrC,GACpB5C,EAAI,EAAGA,EAAI+I,EAAY/I,GAAK,EAAG,CACtC,IAAMsI,EAAcC,EAAsBM,MAEpCG,EAAQrG,GAAeC,EAAO,CAAC1E,SAAUoK,EAAYpK,WAC3DM,EAAS2C,KAAK6H,GAUhB,IANA,IAMA,MANoB,CAClB,CAAC3L,OAAQ,GAAIa,SAAU,CAACrB,GAAI,EAAGC,GAAI,IACnC,CAACO,OAAQ,IAAKa,SAAU,CAACrB,EAAG6B,GAAe5B,GAAI,IAC/C,CAACO,OAAQ,IAAKa,SAAU,CAACrB,EAAG6B,GAAe5B,EAAG6B,KAC9C,CAACtB,OAAQ,IAAKa,SAAU,CAACrB,GAAI,EAAGC,EAAG6B,MAErC,eAAiC,CAA5B,IACGsK,EAAUzG,GADF,MAEdhE,EAAS2C,KAAK8H,GAIhB,IAAMC,EAAQ1K,EAAS+B,QAAO,SAAAvC,GAAM,MAAoB,MAAhBA,EAAOzB,QAG/C2M,EAAMC,MAAK,SAAC9J,EAAGC,GAGb,OAFkBwI,GAAgBzI,EAAEnB,SAAUiG,EAAOjG,UACnC4J,GAAgBxI,EAAEpB,SAAUiG,EAAOjG,aAGvD,IAAMkL,EAAgBF,EAAM1F,MAAMrD,KAAKC,MAAM8I,EAAMjJ,OAAS,IAEtDoJ,EAAgBxJ,EAAQuJ,GACxBE,EHAiB,SAACnN,GAA8B,IAAvBoN,EAAsB,uDAAX,OAC1C,OAAO5H,GAAW,aAChBpF,KAAmB,SAAbgN,EAAsB,IAAM,IAClCvH,KAAK,YACL3E,OAAQ,IACR4E,YAAa,oCACV9F,IGNiBqN,CAAU,CAC9BtL,SAAUmL,EAAcR,MAAM3K,WAEhCM,EAAS2C,KAAKmI,GAEd,IAEMtD,GAASyD,EJ3BE5J,EAAQqF,IACD,II0BKtC,EAAQ,EADpB,CAAC1E,SAAUmL,EAAcR,MAAM3K,WAKhD,OAHAM,EAAS2C,KAAK6E,GAGPxH,EAAS+B,QAAO,SAAAvC,GAAM,MAAoB,SAAhBA,EAAOzB,SC3GtCmN,GAAa,EAEJC,GAAO,SAAC3L,EAAQQ,EAAUkB,GAA8B,IAAnB2E,EAAkB,wDAC5DuF,EAAc,CAClB/M,EAAGmB,EAAOE,SAASrB,EAAI6C,EAAU7C,EACjCC,EAAGkB,EAAOE,SAASpB,EAAI4C,EAAU5C,GAI7B+M,EAAmBvJ,EAAcsJ,EAAapL,GACpD,SAAK6F,GAASwF,EAAiBtJ,QAAO,SAAAuJ,GAAQ,OAAIA,EAASpN,SAAOuD,OAAS,KAK3EzB,EAAS2C,KAAKiF,GAAM,CAAClI,SAAUF,EAAOE,YAGtCF,EAAOE,SAAW0L,GACX,IAGHG,GAAY,SAAC/L,EAAQQ,EAAU+F,GACnC,IAAMyF,EAAO,eACRzF,EADQ,CAEXrG,SAAUF,EAAOE,SACjB+L,MAAOjM,IAGTQ,EAAS2C,KAAK6I,IAMVE,GAAiB,SAAChE,EAASlI,EAAQQ,EAAU2L,GAG/C,IAFA,IAAMhG,EAASC,GAAW5F,GAEpB0H,EAAQjG,OAAS,GAAG,CACxB,IAAMmK,EAASlE,EAAQ2C,MAEvB,GAAI7K,EAAOqM,cAAgBD,EAAOvG,KAAlC,CAeA,GAdE7F,EAAOqM,cAAgBD,EAAOvG,KAKZ,SAAhBuG,EAAO1G,OACT1F,EAAOJ,OAAP,SAA2B,GAGT,QAAhBwM,EAAO1G,OACT0G,EAAOxG,OAAOqC,OAAQ,EACtBmE,EAAOxG,OAAOlH,OAAQ,EACtByN,EAAU3O,OAAQ,GAEA,WAAhB4O,EAAO1G,KAAmB,CAAC,IACrBC,EAAkByG,EAAlBzG,MAAOC,EAAWwG,EAAXxG,OACXA,EAAO0G,OACT1G,EAAO0G,OAAOC,SAAW5G,EAGzBC,EAAOvG,QAAUsG,EAEnB3F,EAAOJ,OAAP,UAA6B2B,EAASqE,EAAO1F,SAAUF,EAAOE,UAC9DiM,EAAU3O,OAAQ,EACdoI,EAAO7E,KAAOoF,EAAOpF,IAAMoF,EAAO9G,QAAU,IAC9C8M,EAAU1C,aAAezJ,GAM7B,GAHoB,SAAhBoM,EAAO1G,MACTiG,GAAK3L,EAAQQ,EAAU4L,EAAO1K,UAAW0K,EAAO/F,OAE9B,UAAhB+F,EAAO1G,KAAkB,CAAC,IACpB1F,EAAWoM,EAAXpM,OACRQ,EAAS2C,KAAKnD,GAEI,eAAhBoM,EAAO1G,MACTqG,GAAU/L,EAAQQ,EAAU4L,EAAO7F,MAEjB,SAAhB6F,EAAO1G,OACT1F,EAAOmE,OAASiI,EAAO1K,WAEL,iBAAhB0K,EAAO1G,OACTyG,EAAUK,aAAc,MAK1BC,GAAc,SAACzM,EAAQQ,EAAU2L,GAErC,GAAqB,SAAjBnM,EAAOgG,OAAoB0F,GAAa,IAAM,EAAlD,CAKA1L,EAAOJ,OAAS,GAChBI,EAAOqM,aAAerM,EAAOmI,eAG7BnI,EAAO0M,aAAe,CACpB7N,EAAGmB,EAAOE,SAASrB,EACnBC,EAAGkB,EAAOE,SAASpB,GAIrBoN,GAAelM,EAAOkI,QAASlI,EAAQQ,EAAU2L,GAGjDnM,EAAOkI,QAAU,GApBkC,2BAuBnD,YAAwBlI,EAAO4D,WAA/B,+CAA2C,CAAC,IACpCsE,GAAUyE,EADyB,SACf3M,EAAQQ,GAAU4C,UAC5C8I,GAAehE,EAASlI,EAAQQ,EAAU2L,IAzBO,qFC9E/CS,I,MLwBiBzO,GKxBM,CAAC+B,SAAU,CAACrB,EAAG,EAAGC,EAAG,ILyBzC6E,GAAW,aAChBpF,KAAM,IACNyF,KAAM,SACNtF,OAAO,EACPW,OAAQ,EACRuE,WAAY,GACZK,YAAa,uBACb+D,OAAQhB,GAAe,GACvBsF,OAAQ,MACLnO,MKjCD0O,GAAkB5C,GAFH,EAEgB,eAAmB2C,KAgLzCE,OA9Kf,WAAgB,IAAD,EACaC,mBALP,GAIN,mBACNnI,EADM,KACCoI,EADD,OAEmBD,mBAASF,IAF5B,mBAENrM,EAFM,KAEIyM,EAFJ,OAGeF,mBAAS,IAHxB,mBAGN1D,EAHM,KAGE6D,EAHF,OAIiBH,mBAAS,IAJ1B,mBAIN3D,EAJM,KAIG+D,EAJH,KAKPnP,GAAQoI,GAAW5F,GACnBzC,EAAM6G,EAZK,EAsBXwI,EAAY,WAChBJ,EAAS,GACTC,EAAYhD,GAAc,EAAD,eAAQ2C,OAG7BS,EAAcC,uBAAY,WAC9BN,EAAS,GACTC,EAAYhD,GAAcrF,EAAD,eAAYgI,QACpC,CAAChI,IAEE2I,EAAYD,uBAAY,SAAAnH,GAC5B6G,EAASpI,EAAQ,GACbA,EAlCW,GAmCbqI,EAAYhD,GAAcrF,EAAQ,EAAGuB,MAEtC,CAACvB,IAiCE4I,EAAgBF,uBAAY,SAAAG,GAChC,IAAMtH,EAASC,GAAW5F,GAClBM,EAAQ2M,EAAR3M,IACFY,EAlCe,SAACZ,GAQtB,MAPgB,CACd4M,QAAS,CAAC7O,EAAG,EAAGC,GAAI,GACpB6O,UAAW,CAAC9O,EAAG,EAAGC,EAAG,GACrB8O,UAAW,CAAC/O,GAAI,EAAGC,EAAG,GACtB+O,WAAY,CAAChP,EAAG,EAAGC,EAAG,IAGTgC,GA0BGgN,CAAehN,GAC3BiN,EAAgC,MAAtBjN,EAAIkN,cACdC,EAA6B,MAAtBnN,EAAIkN,cACXE,EAAgC,MAAtBpN,EAAIkN,cAEpB,GAAc,IAAVpJ,IAAgBmJ,IAAWE,EAK/B,IAAKlQ,IAAOC,IAAU+P,IAAWE,GAKjC,GAAK9H,EAAL,CASA,GALIzE,GACFiK,GAAKxF,EAAQ3F,EAAUkB,GAIrBqM,EACF,GAhDiB,SAAC5H,EAAQ3F,GAC5B,IACQwH,EADkB1F,EAAc6D,EAAOjG,SAAUM,GACtBwE,MAAK,SAAAhF,GAAM,MAAoB,WAAhBA,EAAO0F,QACvD,QAAKsC,IAKL7B,EAAO6B,OAASA,EAChBmG,iBAAO3N,GAAU,SAAAR,GAAM,OAAIA,EAAOe,KAAOiH,EAAOjH,OACzC,GAsCHqN,CAAajI,EAAQ3F,SAGpB,GAtCc,SAAC2F,EAAQ3F,GAC9B,IACM+I,EADoBjH,EAAc6D,EAAOjG,SAAUM,GACxBwE,MAAK,SAAAhF,GAAM,MAAoB,MAAhBA,EAAOzB,QAEvD,OAAO8P,QAAQ9E,GAkCJ+E,CAAenI,EAAQ3F,GAAW,CAEzC2F,EAAO+B,QAAQ/E,KADA,CAACuC,KAAM,eAAgBC,MAAO,EAAGE,KAAM,QAGnD,CAKH,GAJoBrF,EACjB+B,QAAO,SAAAvC,GAAM,MAAoB,MAAhBA,EAAOzB,MAAsC,MAAtByB,EAAOiM,MAAM1N,QACrD0D,OAEekE,EAAO6B,OAAOpB,SAAU,CACxC,IAAMwF,EAASjG,EAAO6B,OAAOjB,IAAIZ,GACjCA,EAAO+B,QAAQ/E,KAAKiJ,IAK1B,GAAI1K,GAAauM,GAAQF,EAAS,CAAC,IAAD,EDPV,SAACvN,GAK3B,IAJA,IAAM2L,EAAY,GACZhG,EAASC,GAAW5F,GACpB+N,EAAiB/N,EAAS+B,QAAO,SAAAvC,GAAM,OAAIA,EAAOe,KAAOoF,EAAOpF,MAEtE,OAAsBoF,GAAtB,mBAAiCoI,IAAjC,eAAkD,CAA7C,IAAMvO,EAAM,KACfyM,GAAYzM,EAAQQ,EAAU2L,GANO,2BAUvC,YAAqB3L,EAArB,+CAA+B,CAAC,IAArBR,EAAoB,QACzBA,EAAOsM,QAAUtM,EAAOsM,OAAOC,SAAW,IAC5CvM,EAAOsM,OAAS,MAEdtM,EAAOX,QAAU,IACnBW,EAAOiI,OAAQ,IAfoB,kFAkBvC,IAAMuG,EAAoBhO,EAAS+B,QAAO,SAAAvC,GAAM,OAAIA,EAAOiI,SAI3D,OAFAyD,KAEO,CACL+C,YAAaD,EACbrC,aChBqCuC,CAAalO,GAAxCiO,EADwB,EACxBA,YAAatC,EADW,EACXA,UAGrBc,EAAYwB,GACZvB,EAAUf,GAINA,EAAUK,aACZe,EAAUpH,GAIV+H,GACFd,UAhDAC,SALAD,MAuDD,CAAC5M,EAAU+M,EAAWF,EAAazI,EAAO5G,EAAMD,IAUnD,OARA4Q,qBAAU,WAGR,OAFAC,OAAOC,iBAAiB,UAAWrB,GAE5B,WACLoB,OAAOE,oBAAoB,UAAWtB,MAEvC,CAACA,IAGF,kBAAC5P,EAAD,CAAcG,IAAKA,EAAKC,KAAMA,GACjB,IAAV4G,EAEC,kBAACvG,EAAD,KACE,wCACA,4BAAQ0Q,QAAS3B,GAAjB,QAAiC,0BAAMjN,UAAW,OAAjB,SAInC,kBAACjC,EAAD,CACEiC,UAAW,gBACX3C,OAAwB,IAAjB6L,EAAO7L,OAEbO,EAEG,kBAAC,GAAD,MAEA,kBAAC,EAAD,CACEyC,SAAUA,EAAS+B,QAAO,SAAAyM,GAAC,OAAIA,EAAEtK,WACjCzE,WAtJK,SAACD,GAClBmN,EAAWnN,IAsJCiP,SAnJI,WAChB9B,EAAW,SAoJL,kBAAC,GAAD,CACE3M,SAAUA,EACV4I,QAASA,EACTrL,IAAKA,EACLC,KAAMA,EACNqL,OAAQA,OC5KAgF,QACW,cAA7BO,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.11f0db54.chunk.js","sourcesContent":["import styled, { css } from 'styled-components'\n\nconst shake = css`\n  @keyframes shake {\n    20% {\n      transform: translate3d(4px, -4px, 0);\n    }\n    40% {\n      transform: translate3d(-4px, 4px, 0);\n    }\n    60% {\n      transform: translate3d(4px, 4px, 0);\n    }\n    80% {\n      transform: translate3d(-4px, -4px, 0);\n    }\n  }\n\n  animation-duration: 0.2s;\n  animation-fill-mode: forwards;\n  animation-timing-function: cubic-bezier(.36,.07,.19,.97);\n`\n\nconst grow = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  animation-name: grow;\n  animation-duration: 0.2s;\n  animation-fill-mode: forwards;\n`\n\nconst centered = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst getBackgroundColor = (win, lose) => {\n  if (win) {\n    return 'black';\n  }\n  if (lose) {\n    return '#d42a2a';\n  }\n\n  return 'black';\n}\n\nexport const AppContainer = styled.div`\n  ${centered}\n  background-color: ${({win, lose}) => getBackgroundColor(win, lose)};\n  transition: background-color 0.2s cubic-bezier(0,1.56,.52,.99);\n  display: flex;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const MapAndInfoContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  ${shake}\n  ${grow}\n  animation-name: ${props => props.shake ? 'shake, grow' : undefined};\n`;\n\nexport const MenuContainer = styled.div`\n  ${centered}\n  animation-name: 'shake';\n  flex-direction: column;\n`;\n\nexport const Overlay = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  position: absolute;\n  z-index: 999;\n  background-color: beige;\n  padding: 2rem;\n\n  h2, button {\n    color: #4135ff;\n  }\n\n  button:hover {\n    background-color: #4135ff;\n    border-color: #4135ff;\n    color: beige\n  }\n\n  h2 {\n    font-size: 3rem;\n    line-height: 3rem;\n    margin: 0rem;\n    margin-bottom: 1rem;\n  }\n`;","import React from 'react';\nimport { CELL_SIZE } from '../constants';\nimport styled from 'styled-components'\nimport './Entity.css';\n\nconst getColour = (char) => {\n  const mapping = {\n    '@': '#fffa03',\n    '#': 'black',\n    '+': 'beige',\n    '>': '#fffa03',\n    '✱': '#fffa03',\n    'b': '#fffa03',\n    'ó': '#fffa03',\n    '⍚': '#fffa03',\n    'S': 'white',\n    '❒': 'white',\n    '♥': '#fffa03',\n    '·': 'tomato'\n  }\n  \n  return mapping[char] || 'tomato';\n}\n\nconst getBackgroundColour = (char) => {\n  const mapping = {\n    '#': 'beige',\n    '+': '#4135ff',\n    'S': '#AAAAFF77',\n    '❒': 'black',\n  }\n  return mapping[char] || 'transparent'\n}\n\nconst getZIndex = (solid, char) => {\n  if (char === '·') {\n    return 0;\n  }\n  if (char === '❒') {\n    return 1;\n  }\n  if (char === 'S') {\n    return 4;\n  }\n  if (char === 'b') {\n    return 3;\n  }\n  \n  if (solid) {\n    return 2;\n  }\n  \n  return 1;\n}\n\nconst Container = styled.div.attrs(({ x, y, solid, char }) => ({\n  style: {\n    left: x * CELL_SIZE + 'px',\n    top: y * CELL_SIZE + 'px',\n    zIndex: getZIndex(solid, char),\n    color: getColour(char),\n  }\n}))`\n  position: relative;\n  width: 0;\n  height: 0;\n`;\n\nconst Inner = styled.div.attrs(({ char, health }) => ({\n  style: {\n    opacity: char !== '·' ? '100%' : `${15 * health}%`,\n    width: CELL_SIZE + 'px',\n    height: CELL_SIZE + 'px',\n    backgroundColor: getBackgroundColour(char),\n  }\n}))`\n  width: CELL_SIZE;\n  height: CELL_SIZE;\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:hover {\n    border: solid 2px white;\n    cursor: pointer;\n    p {\n      color: white;\n    }\n    background-color: navy;\n    opacity: 1;\n  }\n\n  p {\n    display: inline;\n    margin-block-start: 0.2rem;\n    margin-block-end: 0;\n    font-weight: 700;\n  }\n`;\n\nconst getBumpClass = (status)=> {\n  if (status.attacking) {\n    const {x, y} = status.attacking;\n    if (x < 0) {\n      return 'bump-left'\n    }\n    if (x > 0) {\n      return 'bump-right'\n    }\n    if (y < 0) {\n      return 'bump-up'\n    }\n    if (y > 0) {\n      return 'bump-down'\n    }\n  }\n\n  return '';\n}\n\nconst getShakeClass = (char, health)=> {\n  if (char === 'b' && health === 1) {\n    return 'shake';\n  }\n\n  return '';\n}\n\nconst getDisplayChar = (char, health) => {\n\n  if (char === '+') {\n    return '#';\n  }\n\n  if (char === '#') {\n    return '#';\n  }\n\n  if (char === 'b') {\n    return health;\n  }\n\n  if (char === '❒') {\n    return '';\n  }\n\n  return char;\n}\n\nconst Cell = ({entity, hoverStart = ()=>{}}) => {\n  const {char, position: {x, y}, solid, status, health} = entity;\n  return (\n    <Container x={x} y={y} solid={solid} char={char}>\n      <Inner\n        char={char}\n        health={entity.health}\n        className={`${getBumpClass(status)} ${getShakeClass(char, health)}`}\n        onMouseEnter={() => hoverStart(entity)}\n      >\n        <p>{getDisplayChar(char, health)}</p>\n      </Inner>\n    </Container>\n  )\n}\n\nexport default Cell;","export const CELL_SIZE = 30;\nexport const MAP_WIDTH = 9;\nexport const MAP_HEIGHT = 9;","import React from 'react';\nimport styled from 'styled-components'\nimport Entity from '../entity/Entity';\nimport { CELL_SIZE, MAP_WIDTH, MAP_HEIGHT } from '../constants';\n\nconst MapContainer = styled.div`\n  width: ${props => props.width}px;\n  height: ${props => props.height}px;\n  font-size: ${CELL_SIZE / 16}rem;\n  margin-bottom: 1rem;\n`\n\nconst Map = ({entities, hoverStart, hoverStop}) => {\n  return (\n    <MapContainer\n      width={MAP_WIDTH * CELL_SIZE}\n      height={MAP_HEIGHT * CELL_SIZE}\n      onMouseLeave={hoverStop}\n    >\n      {entities.map(entity =>\n        <Entity\n          entity={entity}\n          key={entity.id}\n          hoverStart={hoverStart}\n        />\n      )}\n    </MapContainer>\n  )\n}\n\nexport default Map;","import { rotate } from 'vector-math-fp';\n\nexport const [UP, DOWN, LEFT, RIGHT] = [{x: 0, y: -1}, {x: 0, y: 1}, {x: -1, y: 0}, {x: 1, y: 0}]\nexport const add = (a, b) => ({x: a.x + b.x, y: a.y + b.y});\nexport const subtract = (a, b) => ({x: a.x - b.x, y: a.y - b.y});\n\nexport const turn = (angle, direction) => {\n  const {x, y} = direction;\n  const rotated = rotate(angle, [x, y]);\n  const [rx, ry] = rotated;\n  return {x: rx, y: ry};\n}\n\nexport const shuffle = (original) => {\n  const shuffled = [...original];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n}","import { MAP_WIDTH, MAP_HEIGHT } from '../constants';\nimport { UP, DOWN, LEFT, RIGHT, add } from '../math';\nimport { isEqual } from 'lodash';\n\nexport const getEntitiesAt = (position, entities) =>\n  entities.filter(entity => isEqual(entity.position, position));\n\nexport const getEntitiesAtPositions = (positions, entities) => (\n  positions.map(position => getEntitiesAt(position, entities)).flat()\n);\n\nexport const isAdjacentEdge = ({x, y}) =>\n  x === 0 || x === MAP_WIDTH - 1 || y === 0 || y === MAP_HEIGHT - 1;\n\nexport const getAdjacentPositions = (position) => [\n  add(UP, position), add(DOWN, position), add(LEFT, position), add(RIGHT, position)\n];\n\nexport const getPositionsInDirection = (direction, startPosition, distance) => {\n  const positions = [];\n  while (distance > 0) {\n    const scaledDirection = {x: direction.x * distance, y: direction.y * distance};\n    const offsetPosition = add(startPosition, scaledDirection);\n    positions.push(offsetPosition);\n    distance -= 1;\n  }\n  return positions.reverse();\n};\n\nexport const isCharInDirection = (char, direction, startPosition, distance, entities) => {\n  const positions = getPositionsInDirection(direction, startPosition, distance);\n  for (const position of positions) {\n    const entitiesAtPosition = getEntitiesAt(position, entities);\n    for (const entity of entitiesAtPosition) {\n      if (entity.char === char) {\n        return true;\n      }\n      else if (entity.solid) {\n        return false;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isWalkable = (position, entities) => {\n  const entitiesAtPostion = getEntitiesAt(position, entities);\n\n  // nothing there at all\n  if (entitiesAtPostion.length === 0) {\n    return true;\n  }\n\n  // something solid there\n  if (entitiesAtPostion.some(entity => entity.solid)) {\n    return false;\n  }\n\n  // something there, but it can be walked over\n  return true;\n}","import { walkInALine, faceWalkable, attackPlayer, pursuePlayerInLineOfSight,\n  pursueBombInLineOfSight, eatBomb, pursuePlayerThroughWalls,\n  spawnGhostOnDeath } from './behaviours';\nimport { makeEntity } from './entities';\n\nexport const gooblini = (props) => {\n  return makeEntity({\n    char: 'G',\n    solid: true,\n    behaviours: [walkInALine, faceWalkable, attackPlayer],\n    name: 'gooblini',\n    description: \"Basic enemy, but best not touch it\",\n    ...props,\n  })\n};\n\nexport const charger = (props) => {\n  return makeEntity({\n    char: 'C',\n    name: 'charger',\n    solid: true,\n    facing: {x: 0, y: 0},\n    behaviours: [pursuePlayerInLineOfSight, walkInALine, attackPlayer],\n    name: 'charger',\n    description: 'If it sees you, it charges toward you',\n    ...props,\n  })\n};\n\nexport const eater = (props) => {\n  return makeEntity({\n    char: 'E',\n    solid: true,\n    behaviours: [eatBomb, pursueBombInLineOfSight, attackPlayer],\n    name: 'bombeater',\n    description: 'Eats bombs, om nom',\n    ...props,\n  })\n};\n\nexport const spooky = (props) => {\n  return makeEntity({\n    char: 'S',\n    solid: false,\n    health: 99,\n    speed: 'half',\n    behaviours: [pursuePlayerThroughWalls, attackPlayer],\n    name: 'spooky ghost',\n    description: 'Oooooo spooky',\n    ...props,\n  })\n};\n\nexport const ghostSpawner = (props) => {\n  return makeEntity({\n    char: 's',\n    solid: false,\n    health: 5,\n    behaviours: [spawnGhostOnDeath],\n    name: 'ghost spawner',\n    description: '',\n    visible: false,\n    ...props,\n  })\n};\n\nexport const getRandomEnemy = (level, props) => {\n  const levels = [\n    [gooblini],\n    [gooblini, charger],\n    [gooblini, charger, eater],\n    [gooblini, charger, eater],\n    [gooblini, charger, eater],\n  ];\n\n  const available = levels[level - 1];\n  const index = Math.floor(Math.random() * available.length);\n  return available[index](props);\n}","/*\nBehaviours are used at the start of a turn to generate a set of actions\n*/\n\nimport { getEntitiesAt, getEntitiesAtPositions, getAdjacentPositions,\n  isWalkable, getPositionsInDirection, isCharInDirection } from '../map/map-util';\nimport { flame, findPlayer } from './entities';\nimport { spooky } from './enemies';\nimport { UP, DOWN, LEFT, RIGHT, add, subtract, turn } from '../math';\nimport { remove } from 'lodash';\n\nconst isAttackable = (entity) => {\n  if (entity.char === '❒') {\n    return false;\n  }\n  if (entity.solid || entity.char === '@') {\n    return true;\n  }\n  \n  return false;\n}\n\nconst containsAttackable = (position, entities) => {\n  return getEntitiesAt(position, entities).find(isAttackable)\n}\n\nexport const explodeOnDeath = (entity, entities) => {\n  const {radius, power} = entity;\n  entity.health -= 1;\n  if (entity.health > 0) {\n    return [];\n  } else {\n    const attackPositions = [entity.position];\n    const spawnPositions = [entity.position];\n\n    for (const direction of [UP, DOWN, LEFT, RIGHT]) {\n      const positions = getPositionsInDirection(direction, entity.position, radius, entities)\n      const firstSolidIndex = positions.findIndex(position => containsAttackable(position, entities));\n      if (firstSolidIndex !== -1) {\n        attackPositions.push(positions[firstSolidIndex]);\n        spawnPositions.push(...positions.slice(0, firstSolidIndex + 1));\n      }\n      else {\n        spawnPositions.push(...positions);\n      }\n    }\n\n    const entitiesToAttack = getEntitiesAtPositions(attackPositions, entities);\n\n    const attackActions = entitiesToAttack.map(entity => (\n      {type: 'attack', value: power, target: entity, cost: 0}\n    ));\n\n    // Spawn fire\n    const spawnActions = spawnPositions.map(position => (\n      {type: 'spawn', value: 1, entity: flame({position}), cost: 0}\n    ));\n    return [...attackActions, ...spawnActions];\n  }\n}\n\nexport const spawnGhostOnDeath = (entity, entities) => {\n  entity.health -= 1;\n  if (entity.health > 0) {\n    return [];\n  } else {\n    const { position } = entity;\n    return [{type: 'spawn', value: 1, entity: spooky({position}), cost: 0}]    \n  }\n}\n\nexport const attackSelf = (entity, entities) => {\n  return [{type: 'attack', value: 1, target: entity, cost: 0}]\n}\n\nexport const walkInALine = (entity, entities) => {\n  const { facing } = entity;\n  return [{type: 'move', direction: facing, cost: 1}]\n}\n\nexport const pursuePlayerInLineOfSight = (entity, entities) => {\n  for (const direction of [UP, DOWN, LEFT, RIGHT]) {\n    const range = 12;\n    if (isCharInDirection('@', direction, entity.position, range, entities)) {\n      return [\n        {type: 'move', direction, cost: 1},\n        {type: 'face', direction, cost: 0}\n      ]\n    }\n\n  }\n  return [];\n}\n\nexport const pursueBombInLineOfSight = (entity, entities) => {\n  for (const direction of [UP, DOWN, LEFT, RIGHT]) {\n    const range = 12;\n    if (isCharInDirection('b', direction, entity.position, range, entities)) {\n      return [\n        {type: 'move', direction, cost: 1},\n        {type: 'face', direction, cost: 0}\n      ]\n    }\n\n  }\n  return [];\n}\n\nexport const pursuePlayerThroughWalls = (entity, entities) => {\n  const player = findPlayer(entities);\n  const x = player.position.x > entity.position.x ? 1 : -1;\n  const y = player.position.y > entity.position.y ? 1 : -1;\n\n  const direction = Math.random() > 0.5 ? {x: 0, y: y} : {x: x, y: 0};\n\n  return [{type: 'move', direction, cost: 1, force: true}];\n}\n\nexport const faceWalkable = (entity, entities) => {\n  const { facing } = entity;\n\n  // The order is intentional. The forward (facing) direction is placed first, so that\n  // the entity will continue moving in that direction if it can.\n  // Turning around is placed at the end, so that turning left / right is favoured.\n  const directions = [facing, turn(-90, facing), turn(90, facing), turn(180, facing)];\n\n  for (const direction of directions) {\n    const position = add(direction, entity.position);\n    if (isWalkable(position, entities)) {\n      return [{type: 'face', direction, cost: 0}]\n    }\n  }\n\n  // Surrounded on all sides, do nothing\n  return [];\n}\n\nexport const attackPlayer = (entity, entities) => {\n  const colliding = getEntitiesAt(entity.position, entities);\n  const player = colliding.find(entity => entity.char === '@');\n\n  if (player) {\n    return [\n      {type: 'attack', value: 1, target: player, cost: 0}\n    ];\n  }\n\n  return [];\n}\n\nexport const eatBomb = (entity, entities) => {\n  const adjacent = getAdjacentPositions(entity.position);\n  for (const position of adjacent) {\n    const adjacentEntities = getEntitiesAt(position, entities);\n    const bomb = adjacentEntities.find(entity => entity.char === 'b');\n    if (bomb) {\n      const direction = subtract(position, entity.position);\n      \n      return [\n        {type: 'eat', target: bomb, cost: 0},\n        {type: 'move', direction, cost: 1}\n      ];\n    }\n  }\n\n  return [];\n}\n\nexport const attackAdjacentPlayer = (entity, entities) => {\n  const adjacent = getAdjacentPositions(entity.position);\n  const adjacentEntities = getEntitiesAtPositions(adjacent, entities);\n  const player = adjacentEntities.find(entity => entity.char === '@');\n  if (player) {\n    return [{type: 'attack', value: 1, target: player, cost: 1}];\n  }\n\n  return [];\n}\n\nexport const attackAdjacentPlayerAndDie = (entity, entities) => {\n  const adjacent = getAdjacentPositions(entity.position);\n  const adjacentEntities = getEntitiesAtPositions(adjacent, entities);\n  const player = adjacentEntities.find(entity => entity.char === '@');\n  if (player) {\n    return [\n      {type: 'attack', value: 1, target: player, cost: 1},\n      {type: 'attack', value: 1, target: entity, cost: 1}\n    ];\n  }\n\n  return [];\n}\n\nexport const traverseStairs = (entity, entities) => {\n  const collidingEntities = getEntitiesAt(entity.position, entities);\n  const stairsDown = collidingEntities.find(entity => entity.char === '>');\n  const stairsUp = collidingEntities.find(entity => entity.char === '<');\n\n  if (stairsDown) {\n    return [\n      {type: 'change-level', value: 1, cost: 0},\n    ];\n  }\n\n  if (stairsUp) {\n    return [\n      {type: 'change-level', value: -1, cost: 0},\n    ];\n  }\n\n  return [];\n}\n\nexport const pickUpWeapons = (entity, entities) => {  \n  const collidingEntities = getEntitiesAt(entity.position, entities);  \n  const weapon = collidingEntities.find(entity => entity.type === 'weapon');\n  if (!weapon) {\n    return [];\n  }\n\n  // pick up the weapon\n  entity.weapon = weapon;\n  remove(entities, entity => entity.id === weapon.id);\n  \n  return [];\n}\n\nexport const pickUpArmour = (entity, entities) => {  \n  const collidingEntities = getEntitiesAt(entity.position, entities);  \n  const armour = collidingEntities.find(entity => entity.type === 'armour');\n  if (!armour) {\n    return [];\n  }\n\n  // pick up the armour\n  entity.armour = armour;\n  remove(entities, entity => entity.id === armour.id);\n  \n  return [];\n}\n\nexport const pickUpConsumables = (entity, entities) => {  \n  const collidingEntities = getEntitiesAt(entity.position, entities);  \n  const item = collidingEntities.find(entity => entity.type === 'consumable');\n  if (!item) {\n    return [];\n  }\n\n  // use it right away, then discard it\n  const action = item.use(entity);\n  remove(entities, entity => entity.id === item.id);\n  \n  return [action];\n}","import { makeEntity, bomb, flame } from './entities';\nimport { shuffle } from '../math';\n\nconst makeBombBag = (bagProps, bombProps, extraBagProps) => {\n  const weapon = makeEntity({\n    char: 'ó',\n    type: 'weapon',\n    solid: false,\n    health: 999,\n    capacity: bagProps.capacity || 1,\n    description: 'A standard bomb bag',\n    stats: {\n      radius: bombProps.radius,\n      power: bombProps.power,\n      capacity: bagProps.capacity,\n      // health displayed as timer to users\n      timer: bombProps.health,\n    },\n    use: (entity) => ({\n      type: 'place-bomb',\n      cost: 1,\n      bomb: bomb({...bombProps, position: entity.position})\n    }),\n    ...extraBagProps,\n  });\n\n  return weapon;\n}\n\n// health equates to the number of turns before a bomb explodes\n// capacity is how many bombs can be active at a time\n\nexport const proceduralBombBag = (level, props = {}) => {\n  const points = Math.random() * 3 + level;\n  let numTraits = 1;\n  if (points > 4) {\n    numTraits = 2;\n  } else if (points > 6) {\n    numTraits = 3;\n  }\n\n  const plentifulCapacity = {capacity: 3};\n  const largeRadius = {radius: 2};\n  const veryLargeRadius = {radius: 3};\n  const shortFuse = {health: 2};\n  const longFuse = {health: 5};\n  \n  let bagProps = {};\n  let bombProps = {};\n\n  const availableTraits = shuffle([largeRadius, veryLargeRadius, shortFuse, longFuse]);\n  const traits = availableTraits.slice(0, numTraits);\n  for (const trait of traits) {\n    if (trait === plentifulCapacity) {\n      bagProps = {...bagProps, ...trait}\n    }\n    else {\n      bombProps = {...bombProps, ...trait}\n    }\n  }\n  \n  return makeBombBag(bagProps, bombProps, props);\n}\n\nexport const starterBombBag = (level, props = {}) => {\n  const bagProps = {\n    capacity: 1,\n    description: 'A standard bomb bag',\n  }\n  const bombProps = {\n    radius: Math.ceil(Math.random() * level),\n    health: 3,\n    power: 1,\n  };\n  return makeBombBag(bagProps, bombProps, props);\n}\n\nconst weapons = [proceduralBombBag];\n\nexport const getRandomWeapon = () => {\n  const shuffled = shuffle(weapons);\n  const weapon = shuffled[0];\n  \n  return weapon;\n}","import { traverseStairs, explodeOnDeath, attackSelf, pickUpWeapons, pickUpConsumables } from '../entity/behaviours';\nimport { starterBombBag } from './weapons';\n\nlet _id = 0;\nconst makeId = ()=> _id++;\n\nexport const makeEntity = (props) => {\n  if (!props.position) console.error('entity was created without a position', props);\n  if (props.id) console.error('Entity should probably not have a custom ID');\n\n  return {\n    id: makeId(),\n    name: 'thing',\n    char: '?',\n    weapon: null,\n    facing: {x: 0, y: 1},\n    alive: true,\n    solid: false,\n    behaviours: [],\n    actions: [],\n    actionsPerTurn: 1,\n    status: {},\n    health: 1,\n    description: '',\n    visible: true,\n    ...props,\n  }\n};\n\nexport const findPlayer = entities => entities.find(entity => entity.char === '@');\n\nexport const empty = (props) => {\n  return makeEntity({\n    char: '·',\n    solid: false,\n    ...props,\n  });\n}\n\nexport const player = (props) => {\n  return makeEntity({\n    char: '@',\n    name: 'player',\n    solid: false,\n    health: 1,\n    behaviours: [],\n    description: \"It's you, the player\",\n    weapon: starterBombBag(1),\n    armour: null,\n    ...props,\n  })\n};\n\nexport const bomb = (props) => {\n  return makeEntity({\n    char: 'b',\n    name: 'bomb',\n    solid: true,\n    behaviours: [explodeOnDeath],\n    description: \"It's a bomb, and it's going to explode!\",\n    health: 3,\n    power: 1,\n    radius: 1,\n    ...props,\n  })\n};\n\nexport const hole = (props) => {\n  return makeEntity({\n    char: '❒',\n    name: 'hole',\n    solid: true,\n    description: \"A hole in the ground\",\n    health: 999,\n    ...props,\n  })\n};\n\nexport const flame = (props) => {\n  return makeEntity({\n    char: '✱',\n    name: 'flame',\n    solid: false,\n    behaviours: [attackSelf],\n    health: 1,\n    ...props,\n  })\n};\n\nexport const trail = (props) => {\n  return makeEntity({\n    char: '·',\n    name: 'trail',\n    solid: false,\n    behaviours: [attackSelf],\n    health: 3,\n    ...props,\n  })\n};\n\nexport const staircase = (props, upOrDown = 'down') => {\n  return makeEntity({\n    char: upOrDown === 'down' ? '>' : '<',\n    name:'staircase',\n    health: 999,\n    description: \"You see a staircase leading down\",\n    ...props,\n  })\n};\n\nexport const wall = (props, breakable = true) => {\n  return makeEntity({\n    char: breakable ? '+' : '#',\n    name: 'breakable wall',\n    health: breakable ? 1 : 999,\n    solid: true,\n    description: `You see a wall. ${!breakable ? 'It seems unbreakable.' : ''}`,\n    ...props,\n  })\n};","import React from 'react';\nimport styled from 'styled-components'\nimport { findPlayer } from './entity/entities';\nimport { CELL_SIZE, MAP_WIDTH } from './constants';\nimport { getEntitiesAt } from './map/map-util';\n\nconst InfoBox = styled.div`\n  justify-content: start;\n  align-content: center;\n  flex-direction: column;\n  display: flex;\n  width: ${props => props.width}px;\n  height: 5rem;\n  p {\n    text-align: center;\n    line-height: 1.5rem;\n    font-size: 1.2rem;\n    color: white;\n    font-weight: 400;\n    margin-top: 0.6rem;\n    margin-bottom: 0.5rem;\n  }\n  .key {\n    color: #fffa03;\n    font-weight: 600;\n  }\n`\n\nconst StatsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  span {\n    display: inline-block;\n  }\n  .trait {\n    color: #fffa03;\n    font-weight: 600;\n  }\n`\n\nconst getCapacityText = (capacity)=> {\n  const options = ['', 'large', 'plentiful'];\n  return options[capacity - 1];\n}\n\nconst getPowerText = (power)=> {\n  const options = [null, 'powerful', 'very powerful', 'dangerously powerful']\n  return options[power - 1];\n}\n\nconst getRadiusText = (radius)=> {\n  const options = [null, 'large radius', 'very large radius', 'dangerously large radius'];\n  return options[radius - 1];\n}\n\nconst getTimerText = (timer)=> {\n  let text = null;\n  if (timer === 2) {\n    text = 'short fuse'\n  }\n  if (timer === 5) {\n    text = 'long fuse'\n  }\n  return text;\n}\n\nconst Stats = ({entity}) => {\n  if (!entity || !entity.stats) {\n    // returning empty stats container to prevent the height from shifting\n    return <StatsContainer><p></p></StatsContainer>;\n  }\n\n  const { capacity, power, radius, timer } = entity.stats;\n\n  const capacityText = getCapacityText(capacity);\n  const powerText = getPowerText(power);\n  const radiusText = getRadiusText(radius);\n  const timerText = getTimerText(timer);\n\n  return (\n  <StatsContainer>\n    <p>\n      <span>A</span>\n      { \" \" }\n      {capacityText && <span className=\"trait\">{capacityText} </span>}\n      { \" \" }\n      <span>bomb bag</span>\n      { \" \" }\n      {(powerText || radiusText || timerText) && <span>with</span>}\n      { \" \" }\n      {powerText && <span className=\"trait\">{powerText} </span>}\n      { \" \" }\n      {radiusText && <span className=\"trait\">{radiusText} </span>}\n      { \" \" }\n      {timerText && <span className=\"trait\">{timerText} </span>}\n      { \" \" }\n      {(powerText || radiusText || timerText) && <span>bombs</span>}\n    </p>\n  </StatsContainer>\n  );\n}\n\nconst getInfoToDisplay = (hovered, entities, win, lose, events) => {\n  const player = findPlayer(entities);\n  const entitiesAtPlayer = player ? getEntitiesAt(player.position, entities) : [];\n  const stairs = entitiesAtPlayer.find(entity => entity.char === '>');\n  const weapon = entitiesAtPlayer.find(entity => entity.type === 'weapon');\n\n  if (!weapon && !stairs && !hovered && !win && !lose) {\n    return null;\n  }\n\n  const entity = weapon || stairs || hovered;\n\n  if (lose) {\n    const killer = events.playerKiller;\n    return (\n      <>\n        <p>You were killed by a <span className=\"key\">{killer ? killer.name : 'something'}</span></p>\n        <p>Back to title <span className=\"key\">(x)</span></p>\n      </>\n    );\n  }\n\n  if (win) {\n    return (\n      <>\n        <p>You conquered the dungeon. Way to go!</p>\n        <p>Back to title <span className=\"key\">(x)</span></p>\n      </>\n    );\n  }\n\n  // Player sitting over weapon\n  if (weapon) {\n    return (\n      <>\n        <Stats entity={entity} />\n        <p>take <span className=\"key\">(x)</span></p>\n      </>\n    );\n  }\n  // Player sitting over stairs\n  else if (stairs) {\n    return (\n      <>\n        <p>{entity.description || ''}</p>\n        <p>descend <span className=\"key\">(x)</span></p>\n      </>\n    );\n  }\n  // Hovering something with the mouse\n  else {\n    return (\n      <>\n        {hovered.stats\n          ? <Stats entity={hovered} />\n          : <p>{hovered.description || ''}</p>}\n      </>\n    );\n  }\n}\n\nconst Info = ({hovered, entities, win, lose, events}) => {\n  return (\n    <InfoBox width={MAP_WIDTH * CELL_SIZE}>\n      {getInfoToDisplay(hovered, entities, win, lose, events)}\n    </InfoBox>\n  )\n}\n\nexport default Info;","import React from 'react';\nimport styled from 'styled-components'\n\nconst HugeText = styled.p`\n    font-size: 15rem;\n    color: beige;\n    font-weight: 700;\n    margin-top: 0;\n    margin-bottom: 3rem;\n  }\n  .player {\n    color: #fffa03;\n  }\n`\n\nconst WinGraphic = () => {\n  return <HugeText>\n    <span className=\"player\">@</span>!\n  </HugeText>\n}\n\nexport default WinGraphic;","import { MAP_WIDTH, MAP_HEIGHT } from '../constants';\nimport { isAdjacentEdge, getAdjacentPositions } from '../map/map-util';\nimport { empty, staircase, wall, hole } from '../entity/entities';\nimport { getRandomEnemy, ghostSpawner } from '../entity/enemies';\nimport { getRandomWeapon } from '../entity/weapons';\nimport { shuffle } from '../math';\nimport { isEqual } from 'lodash';\n\nexport const makeRoomWithPlayerAndWalls = (player) => {\n  const entities = [player];\n  const emptyEntities = [];\n\n  for (let x = 0; x < MAP_WIDTH; x += 1) {\n    for (let y = 0; y < MAP_HEIGHT; y += 1) {\n      const position = {x, y};\n      // don't place anything where the player is\n      if (isEqual(position, player.position)) {\n        continue;\n      }\n\n      const adjacentPositons = getAdjacentPositions(player.position);\n      const isAdjacentPlayer = adjacentPositons.find(adjPosition => isEqual(position, adjPosition));\n\n      if (isAdjacentEdge(position) || (x % 2 === 0 && y % 2 === 0)) {\n        const unbreakableWall = wall({position}, false);\n        entities.push(unbreakableWall);\n      }\n      // don't place breakable walls next to where the player is\n      else if (!isAdjacentPlayer) {\n        const emptyEntity = empty({position});\n        emptyEntities.push(emptyEntity);\n      }\n    }\n  }\n\n  let shuffledEmptyEntities = shuffle(emptyEntities);\n\n  // need to leave some spots for the player and enemies to fit and walk around\n  const maxThings = emptyEntities.length - 16;\n  // need to have at least enough breakable walls to hide items and stairs\n  const minBreakableWalls = 5;\n  const numBreakableWalls = Math.min(Math.random() * (maxThings / 4) + minBreakableWalls, maxThings);\n  const remainingRandomSpots = maxThings - numBreakableWalls;\n  const numHoles = Math.min(Math.random() * remainingRandomSpots / 2, 0);\n\n  for (let i = 0; i < numBreakableWalls; i += 1) {\n    const position = shuffledEmptyEntities.pop().position;\n     entities.push(wall({position}, true));\n  }\n\n  for (let i = 0; i < numHoles; i += 1) {\n    const position = shuffledEmptyEntities.pop().position;\n     entities.push(hole({position}));\n  }\n\n  return [...entities, ...shuffledEmptyEntities];\n}\n\nconst distanceBetween = ({x: x1, y: y1}, {x: x2, y: y2}) => {\n  return (x1 - x2) + (y1 - y2);\n}\n\nexport const generateLevel = (level, player) => {\n  const entities = makeRoomWithPlayerAndWalls(player);\n\n  // Add enemies\n  const emptyEntities = entities.filter(entity => entity.char === '·');\n  let shuffledEmptyEntities = shuffle(emptyEntities);\n  const numEnemies = Math.ceil(level * 1.75);\n  for (let i = 0; i < numEnemies; i += 1) {\n    const emptyEntity = shuffledEmptyEntities.pop();\n\n    const enemy = getRandomEnemy(level, {position: emptyEntity.position});\n    entities.push(enemy);\n  }\n\n  // Add ghost spawner (spawns a ghost if the player is taking too long)\n  const ghostsProps = [\n    {health: 75, position: {x: -2, y: -2}},\n    {health: 100, position: {x: MAP_WIDTH + 1, y: -2}},\n    {health: 125, position: {x: MAP_WIDTH + 1, y: MAP_HEIGHT + 1}},\n    {health: 150, position: {x: -2, y: MAP_HEIGHT + 1}},\n  ]\n  for (const props of ghostsProps) {\n    const spawner = ghostSpawner(props);\n    entities.push(spawner); \n  }\n\n  // Add staircase and weapons underneath breakable walls\n  const walls = entities.filter(entity => entity.char === '+');\n\n  // exclude the closest walls\n  walls.sort((a, b)=> {\n    const distanceA = distanceBetween(a.position, player.position);\n    const distanceB = distanceBetween(b.position, player.position);\n    return distanceA - distanceB;\n  })\n  const farthestWalls = walls.slice(Math.floor(walls.length / 3));\n\n  const shuffledWalls = shuffle(farthestWalls);\n  const staircaseDown = staircase({\n    position: shuffledWalls.pop().position\n  });\n  entities.push(staircaseDown);\n\n  const weaponFactory = getRandomWeapon();\n  const bagProps = {position: shuffledWalls.pop().position};\n  const weapon = weaponFactory(level + 1, bagProps);\n  entities.push(weapon);\n\n  // finally, remove all the empty entities\n  return entities.filter(entity => entity.char !== '·');\n}","import { findPlayer, trail } from './entity/entities';\nimport { getEntitiesAt } from './map/map-util';\nimport { subtract } from './math';\n\nlet totalTurns = 0;\n\nexport const move = (entity, entities, direction, force = false) => {\n  const newPosition = {\n    x: entity.position.x + direction.x,\n    y: entity.position.y + direction.y\n  }\n\n  // Check if anything is in the way (unless force is true)\n  const upcomingEntities = getEntitiesAt(newPosition, entities);\n  if (!force && upcomingEntities.filter(upcoming => upcoming.solid).length > 0) {\n    return false;\n  }\n\n  // Add a trail entity at he old position\n  entities.push(trail({position: entity.position}));\n\n  // Move the entity into the new position\n  entity.position = newPosition\n  return true;\n}\n\nconst placeBomb = (entity, entities, bomb) => {\n  const newBomb = {\n    ...bomb,\n    position: entity.position,\n    owner: entity,\n  }\n\n  entities.push(newBomb);\n}\n\n// **IMPORTANT** Perform actions does a lot of sneaky mutation\n// May mutate any entity (either the supplied entity, but also any entity referenced in an action)\n// May push events into newEvents\nconst performActions = (actions, entity, entities, newEvents) => {\n    const player = findPlayer(entities);\n\n    while(actions.length > 0) {\n      const action = actions.pop();\n\n      if (entity.actionPoints >= action.cost) {\n        entity.actionPoints -= action.cost\n      } else {\n        continue;\n      }\n\n      if (action.type === 'wait') {\n        entity.status['waiting'] = true;\n      }\n      // similar to attack, but immediately sets target to !alive to avoid triggering explosions\n      if (action.type === 'eat') {\n        action.target.alive = false;\n        action.target.solid = false;\n        newEvents.shake = true;\n      }\n      if (action.type === 'attack') {\n        const { value, target } = action;\n        if (target.armour) {\n          target.armour.defense -= value;\n        }\n        else {\n          target.health -= value;\n        }\n        entity.status['attacking'] = subtract(target.position, entity.position);\n        newEvents.shake = true;\n        if (target.id === player.id && player.health <= 0) {\n          newEvents.playerKiller = entity;\n        }\n      }\n      if (action.type === 'move') {\n        move(entity, entities, action.direction, action.force)\n      }\n      if (action.type === 'spawn') {\n        const { entity } = action;\n        entities.push(entity);\n      }\n      if (action.type === 'place-bomb') {\n        placeBomb(entity, entities, action.bomb)\n      }\n      if (action.type === 'face') {\n        entity.facing = action.direction;\n      }\n      if (action.type === 'change-level') {\n        newEvents.changeLevel = true;\n      }\n    }\n}\n\nconst performTurn = (entity, entities, newEvents) => {\n  // entities with speed 'half' only perform every 2nd turn\n  if (entity.speed === 'half' && totalTurns % 2 === 0) {\n    return\n  }\n\n  // Reset status\n  entity.status = {};\n  entity.actionPoints = entity.actionsPerTurn;\n\n  // Update prev position for each entity\n  entity.prevPosition = {\n    x: entity.position.x,\n    y: entity.position.y\n  };\n\n  // Perform any exisiting actions (likely just from player input)\n  performActions(entity.actions, entity, entities, newEvents);\n\n  // Clear any remaining existing actions for this turn\n  entity.actions = [];\n\n  // Perform any actions generated from behaviours\n  for (const behaviour of entity.behaviours) {\n    const actions = behaviour(entity, entities).reverse();\n    performActions(actions, entity, entities, newEvents);\n  }\n}\n\nexport const performTurns = (entities)=> {\n  const newEvents = {};\n  const player = findPlayer(entities);\n  const everythingElse = entities.filter(entity => entity.id !== player.id);\n\n  for (const entity of [player, ...everythingElse]) {\n    performTurn(entity, entities, newEvents);\n  }\n\n  // Remove anything that is dead\n  for (const entity of entities) {\n    if (entity.armour && entity.armour.defense <= 0) {\n      entity.armour = null;\n    }\n    if (entity.health <= 0) {\n      entity.alive = false;\n    }\n  }\n  const remainingEntities = entities.filter(entity => entity.alive);\n\n  totalTurns++;\n\n  return {\n    newEntities: remainingEntities,\n    newEvents\n  };\n}","import React, { useState, useEffect, useCallback } from 'react';\nimport { AppContainer, MapAndInfoContainer, MenuContainer, Overlay } from './containers';\nimport Map from './map/Map';\nimport Info from './Info';\nimport WinGraphic from './WinGraphic';\nimport { getEntitiesAt } from './map/map-util';\nimport { generateLevel } from './map/map-generation';\nimport { player, findPlayer } from './entity/entities';\nimport { performTurns, move } from './turn';\nimport { remove } from 'lodash';\nimport './App.css';\n\nconst NUM_LEVELS = 5;\n\nconst initialLevel = 0;\nconst initialPlayer = player({position: {x: 1, y: 1}});\nconst initialEntities = generateLevel(initialLevel, {...initialPlayer})\n\nfunction App() {\n  const [level, setLevel] = useState(initialLevel);\n  const [entities, setEntities] = useState(initialEntities);\n  const [events, setEvents] = useState({});\n  const [hovered, setHovered] = useState({});\n  const lose = !findPlayer(entities);\n  const win = level > NUM_LEVELS;\n\n  const hoverStart = (entity) => {\n    setHovered(entity);\n  }\n\n  const hoverStop = () => {\n    setHovered(null);\n  }\n\n  const startGame = () => {\n    setLevel(1);\n    setEntities(generateLevel(1, {...initialPlayer}));\n  }\n\n  const backToTitle = useCallback(() => {\n    setLevel(0);\n    setEntities(generateLevel(level, {...initialPlayer}));\n  }, [level]);\n\n  const nextLevel = useCallback(player => {\n    setLevel(level + 1);\n    if (level < NUM_LEVELS) {\n      setEntities(generateLevel(level + 1, player));\n    }\n  }, [level]);\n\n  const keyToDirection = (key) => {\n    const mapping = {\n      ArrowUp: {x: 0, y: -1},\n      ArrowDown: {x: 0, y: 1},\n      ArrowLeft: {x: -1, y: 0},\n      ArrowRight: {x: 1, y: 0}\n    }\n\n    return mapping[key];\n  }\n\n  const pickUpWeapon = (player, entities) => {\n    const collidingEntities = getEntitiesAt(player.position, entities);  \n      const weapon = collidingEntities.find(entity => entity.type === 'weapon');\n      if (!weapon) {\n        return false;\n      }\n\n      // pick up the weapon\n      player.weapon = weapon;\n      remove(entities, entity => entity.id === weapon.id);\n      return true;\n  }\n\n  const canEnterStairs = (player, entities) => {\n    const collidingEntities = getEntitiesAt(player.position, entities);  \n    const stairs = collidingEntities.find(entity => entity.char === '>');\n\n    return Boolean(stairs);\n  }\n\n  const handleKeyDown = useCallback(event => {\n    const player = findPlayer(entities);\n    const { key } = event;\n    const direction = keyToDirection(key);\n    const primary = key.toLowerCase() === 'x';\n    const wait = key.toLowerCase() === 'z';\n    const restart = key.toLowerCase() === 'r'\n\n    if (level === 0 && (primary || wait)) {\n      startGame();\n      return;\n    }\n\n    if ((win || lose) && (primary || wait)) {\n      backToTitle();\n      return;\n    }\n\n    if (!player) {\n      return;\n    }\n\n    if (direction) {\n      move(player, entities, direction);\n      // player.actions.push({type: 'move', direction, cost: 1})\n    }\n\n    if (primary) {\n      if (pickUpWeapon(player, entities)) {\n        // weapon was picked up inside pickUpWeapon\n      }\n      else if (canEnterStairs(player, entities)) {\n        const action = {type: 'change-level', value: 1, cost: 0};\n        player.actions.push(action);\n      }\n      else {\n        const numBombsOut = entities\n          .filter(entity => entity.char === 'b' && entity.owner.char === '@')\n          .length;\n        \n        if (numBombsOut < player.weapon.capacity) {\n          const action = player.weapon.use(player);\n          player.actions.push(action);\n        }\n      }\n    }\n\n    if (direction || wait || primary) {\n      const { newEntities, newEvents } = performTurns(entities);\n\n      // Update state\n      setEntities(newEntities);\n      setEvents(newEvents);\n\n      // Apply certain events now\n      // Others like screenshake will react to props change after setEvents is called\n      if (newEvents.changeLevel) {\n        nextLevel(player);\n      }\n    }\n\n    if (restart) {\n      startGame();\n    }\n  }, [entities, nextLevel, backToTitle, level, lose, win]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n\n  return (\n    <AppContainer win={win} lose={lose}>\n      {level === 0 ?\n        // Title screen\n        <MenuContainer>\n          <h1>bomblike</h1>\n          <button onClick={startGame}>play <span className={'key'}>(x)</span></button>\n        </MenuContainer>\n      :\n        // Main game screen\n        <MapAndInfoContainer\n          className={'map-container'}\n          shake={events.shake === true}\n        >\n          {win\n            ?\n              <WinGraphic />\n            :\n              <Map\n                entities={entities.filter(e => e.visible)}\n                hoverStart={hoverStart}\n                hoverEnd={hoverStop}\n              />}\n          <Info\n            entities={entities}\n            hovered={hovered}\n            win={win}\n            lose={lose}\n            events={events}\n          />\n        </MapAndInfoContainer>\n      }\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}