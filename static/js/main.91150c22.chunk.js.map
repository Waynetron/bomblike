{"version":3,"sources":["containers.js","entity/Entity.js","constants.js","map/Map.js","entity/entities.js","math.js","entity/behaviours.js","entity/weapons.js","map/map-util.js","entity/enemies.js","map/map-generation.js","turn.js","App.js","serviceWorker.js","index.js"],"names":["shake","css","grow","centered","AppContainer","styled","div","MapContainer","props","undefined","MenuContainer","Overlay","getColour","char","getBackgroundColour","getZIndex","solid","Container","attrs","x","y","style","left","top","zIndex","color","Inner","opacity","width","CELL_SIZE","height","backgroundColor","getBumpClass","status","attacking","getShakeClass","health","Cell","entity","hoverStart","position","className","onMouseEnter","getDisplayChar","ColumnLayout","InfoBox","StatsContainer","Stats","hovered","stats","capacity","power","radius","timer","capacityText","console","log","getCapacityText","powerText","getPowerText","radiusText","getRadiusText","timerText","text","getTimerText","Map","entities","useState","setHovered","isBombBag","MAP_WIDTH","MAP_HEIGHT","onMouseLeave","map","key","id","description","UP","DOWN","LEFT","RIGHT","add","a","b","subtract","turn","angle","direction","rotated","rotate","shuffle","original","shuffled","i","length","j","Math","floor","random","explodeOnDeath","positions","getPositionsInDirection","attackActions","getEntitiesAtPositions","type","value","target","cost","spawnActions","flame","attackSelf","walkInALine","facing","pursuePlayerInLineOfSight","isCharInDirection","pursueBombInLineOfSight","pursuePlayerThroughWalls","player","findPlayer","force","faceWalkable","isWalkable","attackPlayer","getEntitiesAt","find","eatBomb","adjacent","getAdjacentPositions","bomb","traverseStairs","collidingEntities","stairsDown","stairsUp","pickUpWeapons","weapon","newWeapon","use","remove","makeBombBag","bagProps","bombProps","extraBagProps","makeEntity","starterBombBag","level","max","ceil","weapons","points","numTraits","plentifulCapacity","largeRadius","veryLargeRadius","shortFuse","longFuse","powerful","availableTraits","traits","slice","trait","_id","error","alive","behaviours","actions","actionsPerTurn","speed","wall","breakable","filter","isEqual","flat","isAdjacentEdge","startPosition","distance","scaledDirection","offsetPosition","push","reverse","entitiesAtPosition","entitiesAtPostion","some","gooblini","name","charger","eater","getRandomEnemy","available","generateLevel","isAdjacentPlayer","adjPosition","unbreakableWall","breakableWall","emptyEntity","makeRoomWithPlayerAndWalls","emptyEntities","shuffledEmptyEntities","numEnemies","pop","enemy","walls","shuffledWalls","staircaseDown","upOrDown","staircase","weaponFactory","totalTurns","move","newPosition","upcomingEntities","upcoming","placeBomb","newBomb","owner","performActions","newEvents","action","actionPoints","changeLevel","performTurn","prevPosition","behaviour","performTurns","everythingElse","remainingEntities","ghost","newEntities","initialPlayer","initialEntities","App","setLevel","setEntities","events","setEvents","lose","win","startGame","backToTitle","useCallback","nextLevel","handleKeyDown","event","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","keyToDirection","wait","toLowerCase","restart","useEffect","window","addEventListener","removeEventListener","onClick","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"46DAEA,IAAMA,EAAQC,YAAH,KAqBLC,EAAOD,YAAH,KAUJE,EAAWF,YAAH,KAMDG,EAAeC,IAAOC,IAAV,IACrBH,GAGSI,EAAeF,IAAOC,IAAV,IACrBN,EACAE,EACAC,GACgB,SAAAK,GAAK,OAAIA,EAAMR,MAAQ,mBAAgBS,KAG9CC,EAAgBL,IAAOC,IAAV,IACtBH,GAKSQ,EAAUN,IAAOC,IAAV,K,mmBCnDpB,IAAMM,EAAY,SAACC,GAYjB,MAXgB,CACd,IAAK,UACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,SACL,EAAK,SACL,OAAK,SACL,EAAK,SAGQA,IAAS,UAGpBC,EAAsB,SAACD,GAM3B,MALgB,CACd,IAAK,QACL,IAAK,UACL,EAAK,aAEQA,IAAS,eAGpBE,EAAY,SAACC,EAAOH,GACxB,MAAa,MAATA,EACK,EAELG,EACK,EAGF,GAGHC,EAAYZ,IAAOC,IAAIY,OAAM,gBAAGC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAGJ,EAAT,EAASA,MAAOH,EAAhB,EAAgBA,KAAhB,MAA4B,CAC7DQ,MAAO,CACLC,KC1CqB,GD0CfH,EAAgB,KACtBI,IC3CqB,GD2ChBH,EAAgB,KACrBI,OAAQT,EAAUC,EAAOH,GACzBY,MAAOb,EAAUC,OALHR,CAAH,KAaTqB,EAAQrB,IAAOC,IAAIY,OAAM,gBAAGL,EAAH,EAAGA,KAAH,MAAe,CAC5CQ,MAAO,CACLM,QAAkB,SAATd,EAAe,OAAS,MACjCe,MAAOC,OACPC,OAAQD,OACRE,gBAAiBjB,EAAoBD,OAL3BR,CAAH,KAiCL2B,EAAe,SAACC,GACpB,GAAIA,EAAOC,UAAW,CAAC,IAAD,EACLD,EAAOC,UAAff,EADa,EACbA,EAAGC,EADU,EACVA,EACV,GAAID,EAAI,EACN,MAAO,YAET,GAAIA,EAAI,EACN,MAAO,aAET,GAAIC,EAAI,EACN,MAAO,UAET,GAAIA,EAAI,EACN,MAAO,YAIX,MAAO,IAGHe,EAAgB,SAACtB,EAAMuB,GAC3B,MAAa,MAATvB,GAA2B,IAAXuB,EACX,QAGF,IAmCMC,EAfF,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,WACd1B,EAAiDyB,EAAjDzB,KAD8B,EACmByB,EAA3CE,SAAWrB,EADa,EACbA,EAAGC,EADU,EACVA,EAAIJ,EAAyBsB,EAAzBtB,MAAOiB,EAAkBK,EAAlBL,OAAQG,EAAUE,EAAVF,OAC9C,OACE,kBAACnB,EAAD,CAAWE,EAAGA,EAAGC,EAAGA,EAAGJ,MAAOA,EAAOH,KAAMA,GACzC,kBAACa,EAAD,CACEb,KAAMA,EACN4B,UAAS,UAAKT,EAAaC,GAAlB,YAA6BE,EAActB,EAAMuB,IAC1DM,aAAc,kBAAMH,EAAWD,KAE/B,2BA1Be,SAACzB,EAAMuB,GAE5B,MAAa,MAATvB,EACK,IAGI,MAATA,EACK,IAGI,MAATA,EACKuB,EAGFvB,EAYG8B,CAAe9B,EAAMuB,O,o1BEvIjC,ICgCuB5B,EDhCjBoC,EAAevC,IAAOC,IAAV,KAIZC,EAAeF,IAAOC,IAAV,KACP,SAAAE,GAAK,OAAIA,EAAMoB,SACd,SAAApB,GAAK,OAAIA,EAAMsB,SACZD,GAITgB,EAAUxC,IAAOC,IAAV,KAKF,SAAAE,GAAK,OAAIA,EAAMoB,SAYpBkB,EAAiBzC,IAAOC,IAAV,KAwCdyC,EAAQ,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACd,IAAKA,IAAYA,EAAQC,MAEvB,OAAO,kBAACH,EAAD,KAAgB,6BAHE,MAMgBE,EAAQC,MAA3CC,EANmB,EAMnBA,SAAUC,EANS,EAMTA,MAAOC,EANE,EAMFA,OAAQC,EANN,EAMMA,MAE3BC,EAnCgB,SAACJ,GACvBK,QAAQC,IAAIN,GAEZ,MADgB,CAAC,GAAI,QAAS,aACfA,EAAW,GAgCLO,CAAgBP,GAC/BQ,EA9Ba,SAACP,GAEpB,MADgB,CAAC,KAAM,WAAY,gBAAiB,wBACrCA,EAAQ,GA4BLQ,CAAaR,GACzBS,EA1Bc,SAACR,GAErB,MADgB,CAAC,KAAM,eAAgB,oBAAqB,4BAC7CA,EAAS,GAwBLS,CAAcT,GAC3BU,EAtBa,SAACT,GACpB,IAAIU,EAAO,KAOX,OANc,IAAVV,IACFU,EAAO,cAEK,IAAVV,IACFU,EAAO,aAEFA,EAcWC,CAAaX,GAE/B,OACA,kBAACP,EAAD,KACE,2BACE,mCACE,IACDQ,GAAgB,0BAAMb,UAAU,SAASa,EAAzB,KACf,IACF,0CACE,KACAI,GAAaE,GAAcE,IAAc,sCACzC,IACDJ,GAAa,0BAAMjB,UAAU,SAASiB,EAAzB,KACZ,IACDE,GAAc,0BAAMnB,UAAU,SAASmB,EAAzB,KACb,IACDE,GAAa,0BAAMrB,UAAU,SAASqB,EAAzB,KACZ,KACAJ,GAAaE,GAAcE,IAAc,0CAwClCG,EAlCH,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACIC,mBAAS,IADb,mBACnBnB,EADmB,KACVoB,EADU,KAEpB7B,EAAa,SAACD,GAClB8B,EAAW9B,IAMP+B,EAAarB,GAAWA,EAAQC,MAEtC,OACE,kBAACL,EAAD,KACE,kBAAC,EAAD,CACEhB,MAAO0C,IACPxC,OAAQyC,IACRC,aAXY,WAChBJ,EAAW,QAYNF,EAASO,KAAI,SAAAnC,GAAM,OAClB,kBAAC,EAAD,CACEA,OAAQA,EACRoC,IAAKpC,EAAOqC,GACZpC,WAAYA,QAIlB,kBAACM,EAAD,CAASjB,MAAO0C,MACZD,GAAa,2BAAIrB,EAAUA,EAAQ4B,YAAc,IAClDP,GAAa,kBAAC,EAAD,CAAOrB,QAASA,O,eEvIxB6B,EAA0B,CAAC1D,EAAG,EAAGC,GAAI,GAAjC0D,EAAqC,CAAC3D,EAAG,EAAGC,EAAG,GAAzC2D,EAA6C,CAAC5D,GAAI,EAAGC,EAAG,GAAlD4D,EAAsD,CAAC7D,EAAG,EAAGC,EAAG,GACjF6D,EAAM,SAACC,EAAGC,GAAJ,MAAW,CAAChE,EAAG+D,EAAE/D,EAAIgE,EAAEhE,EAAGC,EAAG8D,EAAE9D,EAAI+D,EAAE/D,IAC3CgE,EAAW,SAACF,EAAGC,GAAJ,MAAW,CAAChE,EAAG+D,EAAE/D,EAAIgE,EAAEhE,EAAGC,EAAG8D,EAAE9D,EAAI+D,EAAE/D,IAEhDiE,GAAO,SAACC,EAAOC,GAAe,IAClCpE,EAAQoE,EAARpE,EAAGC,EAAKmE,EAALnE,EACJoE,EAAUC,YAAOH,EAAO,CAACnE,EAAGC,IAFM,cAGvBoE,EAHuB,GAIxC,MAAO,CAACrE,EAJgC,KAIzBC,EAJyB,OAO7BsE,GAAU,SAACC,GAEtB,IADA,IAAMC,EAAQ,YAAOD,GACZE,EAAID,EAASE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADI,EAEf,CAACD,EAASG,GAAIH,EAASC,IAAnDD,EAASC,GAFkC,KAE9BD,EAASG,GAFqB,KAI9C,OAAOH,G,QCTIO,GAAiB,SAAC7D,EAAQ4B,GAAc,IAC5Cd,EAAiBd,EAAjBc,OAAQD,EAASb,EAATa,MAEf,GADAb,EAAOF,QAAU,EACbE,EAAOF,OAAS,EAClB,MAAO,GAEP,IAAMgE,EAAS,sBACVC,GAAwBxB,EAAIvC,EAAOE,SAAUY,EAAQc,IAD3C,YAEVmC,GAAwBvB,EAAMxC,EAAOE,SAAUY,EAAQc,IAF7C,YAGVmC,GAAwBtB,EAAMzC,EAAOE,SAAUY,EAAQc,IAH7C,YAIVmC,GAAwBrB,EAAO1C,EAAOE,SAAUY,EAAQc,IAJ9C,CAKb5B,EAAOE,WAIH8D,EAFmBC,GAAuBH,EAAWlC,GAEpBO,KAAI,SAAAnC,GAAM,MAC/C,CAACkE,KAAM,SAAUC,MAAOtD,EAAOuD,OAAQpE,EAAQqE,KAAM,MAIjDC,EAAeR,EAAU3B,KAAI,SAAAjC,GAAQ,MACzC,CAACgE,KAAM,QAASC,MAAO,EAAGnE,OAAQuE,GAAM,CAACrE,aAAYmE,KAAM,MAE7D,MAAM,GAAN,mBAAWL,GAAX,YAA6BM,KAIpBE,GAAa,SAACxE,EAAQ4B,GACjC,MAAO,CAAC,CAACsC,KAAM,SAAUC,MAAO,EAAGC,OAAQpE,EAAQqE,KAAM,KAG9CI,GAAc,SAACzE,EAAQ4B,GAElC,MAAO,CAAC,CAACsC,KAAM,OAAQjB,UADJjD,EAAX0E,OACkCL,KAAM,KAGrCM,GAA4B,SAAC3E,EAAQ4B,GAChD,cAAwB,CAACW,EAAIC,EAAMC,EAAMC,GAAzC,eAAiD,CAA5C,IAAMO,EAAS,KAElB,GAAI2B,GAAkB,IAAK3B,EAAWjD,EAAOE,SAD/B,GACgD0B,GAC5D,MAAO,CACL,CAACsC,KAAM,OAAQjB,YAAWoB,KAAM,GAChC,CAACH,KAAM,OAAQjB,YAAWoB,KAAM,IAKtC,MAAO,IAGIQ,GAA0B,SAAC7E,EAAQ4B,GAC9C,cAAwB,CAACW,EAAIC,EAAMC,EAAMC,GAAzC,eAAiD,CAA5C,IAAMO,EAAS,KAElB,GAAI2B,GAAkB,IAAK3B,EAAWjD,EAAOE,SAD/B,GACgD0B,GAC5D,MAAO,CACL,CAACsC,KAAM,OAAQjB,YAAWoB,KAAM,GAChC,CAACH,KAAM,OAAQjB,YAAWoB,KAAM,IAKtC,MAAO,IAGIS,GAA2B,SAAC9E,EAAQ4B,GAC/C,IAAMmD,EAASC,GAAWpD,GACpB/C,EAAIkG,EAAO7E,SAASrB,EAAImB,EAAOE,SAASrB,EAAI,GAAK,EACjDC,EAAIiG,EAAO7E,SAASpB,EAAIkB,EAAOE,SAASpB,EAAI,GAAK,EAIvD,MAAO,CAAC,CAACoF,KAAM,OAAQjB,UAFLS,KAAKE,SAAW,GAAM,CAAC/E,EAAG,EAAGC,EAAGA,GAAK,CAACD,EAAGA,EAAGC,EAAG,GAE/BuF,KAAM,EAAGY,OAAO,KAGvCC,GAAe,SAAClF,EAAQ4B,GAQnC,IARiD,IACzC8C,EAAW1E,EAAX0E,OAOR,MAFmB,CAACA,EAAQ3B,IAAM,GAAI2B,GAAS3B,GAAK,GAAI2B,GAAS3B,GAAK,IAAK2B,IAE3E,eAAoC,CAA/B,IAAMzB,EAAS,KACZ/C,EAAWyC,EAAIM,EAAWjD,EAAOE,UACvC,GAAIiF,GAAWjF,EAAU0B,GACvB,MAAO,CAAC,CAACsC,KAAM,OAAQjB,YAAWoB,KAAM,IAK5C,MAAO,IAGIe,GAAe,SAACpF,EAAQ4B,GACnC,IACMmD,EADYM,GAAcrF,EAAOE,SAAU0B,GACxB0D,MAAK,SAAAtF,GAAM,MAAoB,MAAhBA,EAAOzB,QAE/C,OAAIwG,EACK,CAAC,CAACb,KAAM,SAAUC,MAAO,EAAGC,OAAQW,EAAQV,KAAM,IAGpD,IAGIkB,GAAU,SAACvF,EAAQ4B,GAC9B,IAAM4D,EAAWC,GAAqBzF,EAAOE,UADF,uBAE3C,YAAuBsF,EAAvB,+CAAiC,CAAC,IAAvBtF,EAAsB,QAEzBwF,EADmBL,GAAcnF,EAAU0B,GACnB0D,MAAK,SAAAtF,GAAM,MAAoB,MAAhBA,EAAOzB,QACpD,GAAImH,EAGF,MAAO,CACL,CAACxB,KAAM,MAAOE,OAAQsB,EAAMrB,KAAM,GAClC,CAACH,KAAM,OAAQjB,UAJCH,EAAS5C,EAAUF,EAAOE,UAIhBmE,KAAM,KAVK,kFAe3C,MAAO,IA4BIsB,GAAiB,SAAC3F,EAAQ4B,GACrC,IAAMgE,EAAoBP,GAAcrF,EAAOE,SAAU0B,GACnDiE,EAAaD,EAAkBN,MAAK,SAAAtF,GAAM,MAAoB,MAAhBA,EAAOzB,QACrDuH,EAAWF,EAAkBN,MAAK,SAAAtF,GAAM,MAAoB,MAAhBA,EAAOzB,QAEzD,OAAIsH,EACK,CACL,CAAC3B,KAAM,eAAgBC,MAAO,EAAGE,KAAM,IAIvCyB,EACK,CACL,CAAC5B,KAAM,eAAgBC,OAAQ,EAAGE,KAAM,IAIrC,IAGI0B,GAAgB,SAAC/F,EAAQ4B,GAClB5B,EAAOgG,OACf9F,SAAWF,EAAOE,SAE5B,IACM+F,EADoBZ,GAAcrF,EAAOE,SAAU0B,GACrB0D,MAAK,SAAAtF,GAAM,OAAIA,EAAOkG,OAC1D,OAAKD,GAKLjG,EAAOgG,OAASC,EAChBE,kBAAOvE,GAAU,SAAA5B,GAAM,OAAIA,EAAOqC,KAAO4D,EAAU5D,MAE5C,IAPE,ICrLL+D,GAAc,SAACC,EAAUC,EAAWC,GAsBxC,OArBeC,GAAW,aACxBjI,KAAM,OACNG,OAAO,EACPoB,OAAQ,IACRc,SAAUyF,EAASzF,UAAY,EAC/B0B,YAAa,sBACb3B,MAAO,CACLG,OAAQwF,EAAUxF,OAClBD,MAAOyF,EAAUzF,MACjBD,SAAUyF,EAASzF,SAEnBG,MAAOuF,EAAUxG,QAEnBoG,IAAK,SAAClG,GAAD,MAAa,CAChBkE,KAAM,aACNG,KAAM,EACNqB,KAAMA,GAAK,eAAIY,EAAL,CAAgBpG,SAAUF,EAAOE,eAE1CqG,KA0CME,GAAiB,SAACC,GAAuB,IAAhBxI,EAAe,uDAAP,GACtCmI,EAAW,CACfzF,SAAU8C,KAAKiD,IAAIjD,KAAKkD,KAAKlD,KAAKE,SAAW8C,EAAQ,KAAO,GAC5DpE,YAAa,uBAETgE,EAAY,CAChBxF,OAAQ4C,KAAKkD,KAAKlD,KAAKE,SAAW8C,GAClC5G,OAAQ,EACRe,MAAO,GAET,OAAOuF,GAAYC,EAAUC,EAAWpI,IAGpC2I,GAAU,CA9CiB,SAACH,GAAuB,IAAhBxI,EAAe,uDAAP,GACzC4I,EAAyB,EAAhBpD,KAAKE,SAAe8C,EAC/BK,EAAY,EACZD,EAAS,EACXC,EAAY,EACHD,EAAS,IAClBC,EAAY,GAGd,IAAMC,EAAoB,CAACpG,SAAU,GAC/BqG,EAAc,CAACnG,OAAQ,GACvBoG,EAAkB,CAACpG,OAAQ,GAC3BqG,EAAY,CAACrH,OAAQ,GACrBsH,EAAW,CAACtH,OAAQ,GACpBuH,EAAW,CAACxG,MAAO,GAErBwF,EAAW,GACXC,EAAY,GAEVgB,EAAkBlE,GAAQ,CAAC4D,EAAmBC,EAAaC,EAAiBC,EAAWC,EAAUC,IACjGE,EAASD,EAAgBE,MAAM,EAAGT,GApBc,uBAqBtD,YAAoBQ,EAApB,+CAA4B,CAAC,IAAlBE,EAAiB,QACtBA,IAAUT,EACZX,EAAQ,eAAOA,EAAP,GAAoBoB,GAG5BnB,EAAS,eAAOA,EAAP,GAAqBmB,IA1BoB,kFA8BtD,OAAOrB,GAAYC,EAAUC,EAAWpI,KH1DtCwJ,GAAM,EAGGlB,GAAa,SAACtI,GAIzB,OAHKA,EAAMgC,UAAUe,QAAQ0G,MAAM,wCAAyCzJ,GACxEA,EAAMmE,IAAIpB,QAAQ0G,MAAM,+CAErB,aACLtF,GAPgBqF,KAQhBnJ,KAAM,IACNyH,OAAQ,KACRtB,OAAQ,CAAC7F,EAAG,EAAGC,EAAG,GAClB8I,OAAO,EACPlJ,OAAO,EACPmJ,WAAY,GACZC,QAAS,GACTC,eAAgB,EAChBpI,OAAQ,GACRG,OAAQ,EACRwC,YAAa,IACVpE,IAIM8G,GAAa,SAAApD,GAAQ,OAAIA,EAAS0D,MAAK,SAAAtF,GAAM,MAAoB,MAAhBA,EAAOzB,SAsBxDmH,GAAO,SAACxH,GACnB,OAAOsI,GAAW,aAChBjI,KAAM,IACNG,OAAO,EACPmJ,WAAY,CAAChE,IACbvB,YAAa,sCACbxC,OAAQ,EACRe,MAAO,EACPC,OAAQ,EACRkH,MAAO,QACJ9J,KAIMqG,GAAQ,SAACrG,GACpB,OAAOsI,GAAW,aAChBjI,KAAM,IACNG,OAAO,EACPmJ,WAAY,CAACrD,IACb1E,OAAQ,GACL5B,KAaM+J,GAAO,SAAC/J,GAA6B,IAAtBgK,IAAqB,yDAC/C,OAAO1B,GAAW,aAChBjI,KAAM2J,EAAY,IAAM,IACxBpI,OAAQoI,EAAY,EAAI,IACxBxJ,OAAO,EACP4D,YAAY,mBAAD,OAAsB4F,EAAsC,GAA1B,0BAC1ChK,KInFMmH,GAAgB,SAACnF,EAAU0B,GAAX,OAC3BA,EAASuG,QAAO,SAAAnI,GAAM,OAAIoI,mBAAQpI,EAAOE,SAAUA,OAExC+D,GAAyB,SAACH,EAAWlC,GAAZ,OACpCkC,EAAU3B,KAAI,SAAAjC,GAAQ,OAAImF,GAAcnF,EAAU0B,MAAWyG,QAGlDC,GAAiB,SAAC,GAAD,IAAEzJ,EAAF,EAAEA,EAAGC,EAAL,EAAKA,EAAL,OACtB,IAAND,GAAiBmD,KAANnD,GAA6B,IAANC,GAAiBmD,KAANnD,GAElC2G,GAAuB,SAACvF,GAAD,MAAc,CAChDyC,EAAIJ,EAAIrC,GAAWyC,EAAIH,EAAMtC,GAAWyC,EAAIF,EAAMvC,GAAWyC,EAAID,EAAOxC,KAG7D6D,GAA0B,SAACd,EAAWsF,EAAeC,GAEhE,IADA,IAAM1E,EAAY,GACX0E,EAAW,GAAG,CACnB,IAAMC,EAAkB,CAAC5J,EAAGoE,EAAUpE,EAAI2J,EAAU1J,EAAGmE,EAAUnE,EAAI0J,GAC/DE,EAAiB/F,EAAI4F,EAAeE,GAC1C3E,EAAU6E,KAAKD,GACfF,GAAY,EAEd,OAAO1E,GAGIc,GAAoB,SAACrG,EAAM0E,EAAWsF,EAAeC,EAAU5G,GAC1E,IAAMkC,EAAYC,GAAwBd,EAAWsF,EAAeC,GADmB,uBAEvF,YAAuB1E,EAAU8E,UAAjC,+CAA4C,CAAC,IAAlC1I,EAAiC,QACpC2I,EAAqBxD,GAAcnF,EAAU0B,GADT,uBAE1C,YAAqBiH,EAArB,+CAAyC,CAAC,IAA/B7I,EAA8B,QACvC,GAAIA,EAAOzB,OAASA,EAClB,OAAO,EAEJ,GAAIyB,EAAOtB,MACd,OAAO,GAP+B,oFAF2C,kFAavF,OAAO,GAGIyG,GAAa,SAACjF,EAAU0B,GACnC,IAAMkH,EAAoBzD,GAAcnF,EAAU0B,GAGlD,OAAiC,IAA7BkH,EAAkBtF,SAKlBsF,EAAkBC,MAAK,SAAA/I,GAAM,OAAIA,EAAOtB,UCnDjCsK,GAAW,SAAC9K,GACvB,OAAOsI,GAAW,aAChBjI,KAAM,IACNG,OAAO,EACPmJ,WAAY,CAACpD,GAAaS,GAAcE,IACxC6D,KAAM,WACN3G,YAAa,sCACVpE,KAIMgL,GAAU,SAAChL,GACtB,OAAOsI,GAAW,aAChBjI,KAAM,IACNG,OAAO,EACPmJ,WAAY,CAAClD,GAA2BF,GAAaW,IACrD6D,KAAM,UACN3G,YAAa,yCACVpE,KAIMiL,GAAQ,SAACjL,GACpB,OAAOsI,GAAW,aAChBjI,KAAM,IACNG,OAAO,EACPmJ,WAAY,CAACtC,GAASV,GAAyBO,IAC/C6D,KAAM,YACN3G,YAAa,sBACVpE,KAiBMkL,GAAiB,SAAC1C,EAAOxI,GACpC,IAQMmL,EARS,CACb,CAACL,GAAUG,IACX,CAACH,GAAUE,GAASC,IACpB,CAACH,GAAUE,GAASC,IACpB,CAACH,GAAUE,GAASC,IACpB,CAACH,GAAUE,GAASC,KAGGzC,EAAQ,GAEjC,OAAO2C,EADO3F,KAAKC,MAAMD,KAAKE,SAAWyF,EAAU7F,SAC3BtF,ICjBboL,GAAgB,SAAC5C,EAAO3B,GAOnC,IANA,IAAMnD,EArCkC,SAACmD,GAGzC,IAFA,IAAMnD,EAAW,CAACmD,GAETlG,EAAI,EAAGA,ERVO,GQUQA,GAAK,EAClC,IADsC,IAAD,WAC5BC,GACP,IAAMoB,EAAW,CAACrB,IAAGC,KAErB,GAAIsJ,mBAAQlI,EAAU6E,EAAO7E,UAC3B,iBAIF,INSgBhC,EMRVqL,EADmB9D,GAAqBV,EAAO7E,UACXoF,MAAK,SAAAkE,GAAW,OAAIpB,mBAAQlI,EAAUsJ,MAChF,IAAKlB,GAAepI,IAAaqJ,EAC/B,iBAGF,GAAIjB,GAAepI,IAAcrB,EAAI,IAAM,GAAKC,EAAI,IAAM,EAAI,CAC5D,IAAM2K,EAAkBxB,GAAK,CAAC/H,aAAW,GACzC0B,EAAS+G,KAAKc,QAEX,GAAI/F,KAAKE,SAAW,GAAK,CAC5B,IAAM8F,EAAgBzB,GAAK,CAAC/H,aAAW,GACvC0B,EAAS+G,KAAKe,OAEX,CACH,IAAMC,GNNQzL,EMMY,CAACgC,YNL1BsG,GAAW,aAChBjI,KAAM,OACNG,OAAO,GACJR,KMGC0D,EAAS+G,KAAKgB,KAxBT7K,EAAI,EAAGA,ERVM,GQUUA,GAAK,EAAG,EAA/BA,GA6BX,OAAO8C,EAIUgI,CAA2B7E,GAGtC8E,EAAgBjI,EAASuG,QAAO,SAAAnI,GAAM,MAAoB,SAAhBA,EAAOzB,QACnDuL,EAAwB1G,GAAQyG,GAC9BE,EAAarG,KAAKkD,KAAa,KAARF,GACpBnD,EAAI,EAAGA,EAAIwG,EAAYxG,GAAK,EAAG,CACtC,IAAMoG,EAAcG,EAAsBE,MAEpCC,EAAQb,GAAe1C,EAAO,CAACxG,SAAUyJ,EAAYzJ,WAC3D0B,EAAS+G,KAAKsB,GAIhB,IAAMC,EAAQtI,EAASuG,QAAO,SAAAnI,GAAM,MAAoB,MAAhBA,EAAOzB,QACzC4L,EAAgB/G,GAAQ8G,GACxBE,ENYiB,SAAClM,GAA8B,IAAvBmM,EAAsB,uDAAX,OAC1C,OAAO7D,GAAW,aAChBjI,KAAmB,SAAb8L,EAAsB,IAAM,IAClCvK,OAAQ,IACRwC,YAAa,oCACVpE,IMjBiBoM,CAAU,CAC9BpK,SAAUiK,EAAcH,MAAM9J,WAEhC0B,EAAS+G,KAAKyB,GAEd,IAAK,IAAI7G,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAC7B,IAEMyC,GAASuE,EHWAnH,GAAQyD,IACD,IGZOH,EAAQ,EADpB,CAACxG,SAAUiK,EAAcH,MAAM9J,WAEhD0B,EAAS+G,KAAK3C,GAGhB,OAAOpE,GCpEL4I,GAAa,EAGJC,GAAO,SAACzK,EAAQ4B,EAAUqB,GAA8B,IAAnBgC,EAAkB,wDAC5DyF,EAAc,CAClB7L,EAAGmB,EAAOE,SAASrB,EAAIoE,EAAUpE,EACjCC,EAAGkB,EAAOE,SAASpB,EAAImE,EAAUnE,GAI7B6L,EAAmBtF,GAAcqF,EAAa9I,GACpD,SAAKqD,GAAS0F,EAAiBxC,QAAO,SAAAyC,GAAQ,OAAIA,EAASlM,SAAO8E,OAAS,KAI3ExD,EAAOE,SAAWwK,GACX,IAGHG,GAAY,SAAC7K,EAAQ4B,EAAU8D,GACnC,IAAMoF,EAAO,eACRpF,EADQ,CAEXxF,SAAUF,EAAOE,SACjB6K,MAAO/K,IAGT4B,EAAS+G,KAAKmC,IAMVE,GAAiB,SAAClD,EAAS9H,EAAQ4B,EAAUqJ,GAC/C,KAAMnD,EAAQtE,OAAS,GAAG,CACxB,IAAM0H,EAASpD,EAAQkC,MAEvB,GAAIhK,EAAOmL,cAAgBD,EAAO7G,KAAlC,CAeA,GAdErE,EAAOmL,cAAgBD,EAAO7G,KAKZ,SAAhB6G,EAAOhH,OACTlE,EAAOL,OAAP,SAA2B,GAGT,QAAhBuL,EAAOhH,OACTgH,EAAO9G,OAAOwD,OAAQ,EACtBsD,EAAO9G,OAAO1F,OAAQ,EACtBuM,EAAUvN,OAAQ,GAEA,WAAhBwN,EAAOhH,KAAmB,CAAC,IACrBC,EAAkB+G,EAAlB/G,MAAOC,EAAW8G,EAAX9G,OACfA,EAAOtE,QAAUqE,EACjBnE,EAAOL,OAAP,UAA6BmD,EAASsB,EAAOlE,SAAUF,EAAOE,UAC9D+K,EAAUvN,OAAQ,EAKpB,GAHoB,SAAhBwN,EAAOhH,MACTuG,GAAKzK,EAAQ4B,EAAUsJ,EAAOjI,UAAWiI,EAAOjG,OAE9B,UAAhBiG,EAAOhH,KAAkB,CAAC,IACpBlE,EAAWkL,EAAXlL,OACR4B,EAAS+G,KAAK3I,GAEI,eAAhBkL,EAAOhH,MACT2G,GAAU7K,EAAQ4B,EAAUsJ,EAAOxF,MAEjB,SAAhBwF,EAAOhH,OACTlE,EAAO0E,OAASwG,EAAOjI,WAEL,iBAAhBiI,EAAOhH,OACT+G,EAAUG,aAAc,MAK1BC,GAAc,SAACrL,EAAQ4B,EAAUqJ,GAErC,GAAqB,SAAjBjL,EAAOgI,OAAoBwC,GAAa,IAAM,EAAlD,CAKAxK,EAAOL,OAAS,GAChBK,EAAOmL,aAAenL,EAAO+H,eAG7B/H,EAAOsL,aAAe,CACpBzM,EAAGmB,EAAOE,SAASrB,EACnBC,EAAGkB,EAAOE,SAASpB,GAIrBkM,GAAehL,EAAO8H,QAAS9H,EAAQ4B,EAAUqJ,GAGjDjL,EAAO8H,QAAU,GApBkC,2BAuBnD,YAAwB9H,EAAO6H,WAA/B,+CAA2C,CAAC,IACpCC,GAAUyD,EADyB,SACfvL,EAAQ4B,GAAUgH,UAC5CoC,GAAelD,EAAS9H,EAAQ4B,EAAUqJ,IAzBO,qFA6BxCO,GAAe,SAAC5J,GAK3B,IAJA,IAAMqJ,EAAY,GACZlG,EAASC,GAAWpD,GACpB6J,EAAiB7J,EAASuG,QAAO,SAAAnI,GAAM,OAAIA,EAAOqC,KAAO0C,EAAO1C,MAEtE,OAAsB0C,GAAtB,mBAAiC0G,IAAjC,eAAkD,CAA7C,IAAMzL,EAAM,KACfqL,GAAYrL,EAAQ4B,EAAUqJ,GANO,2BAUvC,YAAqBrJ,EAArB,+CAA+B,CAAC,IAArB5B,EAAoB,QACzBA,EAAOF,QAAU,IACnBE,EAAO4H,OAAQ,IAZoB,kFAevC,IFxFqB1J,EEwFfwN,EAAoB9J,EAASuG,QAAO,SAAAnI,GAAM,OAAIA,EAAO4H,SAI3D,KAFA4C,GAzH4B,MA2He,EAAG,CAC5C,IAAMmB,GF7FazN,EE6FE,CAACgC,SAAU,CAACrB,GAAI,EAAGC,GAAI,IF5FvC0H,GAAW,aAChBjI,KAAM,IACNG,OAAO,EACPoB,OAAQ,GACRkI,MAAO,OACPH,WAAY,CAAC/C,GAA0BM,IACvC6D,KAAM,eACN3G,YAAa,iBACVpE,KEqFHwN,EAAkB/C,KAAKgD,GAGzB,MAAO,CACLC,YAAaF,EACbT,cC7HEY,I,MR0BiB3N,EQ1BM,CAACgC,SAAU,CAACrB,EAAG,EAAGC,EAAG,IR2BzC0H,GAAW,aAChBjI,KAAM,IACNG,OAAO,EACPoB,OAAQ,EACR+H,WAAY,CAAClC,GAAgBI,IAC7BzD,YAAa,uBACb0D,OAAQS,GAAe,IACpBvI,KQjCD4N,GAAkBxC,GAFH,EAEgB,eAAmBuC,KA8HzCE,OA5Hf,WAAgB,IAAD,EACalK,mBALP,GAIN,mBACN6E,EADM,KACCsF,EADD,OAEmBnK,mBAASiK,IAF5B,mBAENlK,EAFM,KAEIqK,EAFJ,OAGepK,mBAAS,IAHxB,mBAGNqK,EAHM,KAGEC,EAHF,KAIPC,GAAQpH,GAAWpD,GACnByK,EAAM3F,EAXK,EAaX4F,EAAY,WAChBN,EAAS,GACTC,EAAY3C,GAAc,EAAD,eAAQuC,OAG7BU,EAAcC,uBAAY,WAC9BR,EAAS,GACTC,EAAY3C,GAAc5C,EAAD,eAAYmF,QACpC,CAACnF,IAEE+F,EAAYD,uBAAY,SAAAzH,GAC5BiH,EAAStF,EAAQ,GACbA,EAzBW,GA0BbuF,EAAY3C,GAAc5C,EAAQ,EAAG3B,MAEtC,CAAC2B,IAaEgG,EAAgBF,uBAAY,SAAAG,GAChC,IAAM5H,EAASC,GAAWpD,GAClBQ,EAAQuK,EAARvK,IACFa,EAde,SAACb,GAQtB,MAPgB,CACdwK,QAAS,CAAC/N,EAAG,EAAGC,GAAI,GACpB+N,UAAW,CAAChO,EAAG,EAAGC,EAAG,GACrBgO,UAAW,CAACjO,GAAI,EAAGC,EAAG,GACtBiO,WAAY,CAAClO,EAAG,EAAGC,EAAG,IAGTsD,GAMG4K,CAAe5K,GAC3B6K,EAA6B,MAAtB7K,EAAI8K,cACXxH,EAA6B,MAAtBtD,EAAI8K,cACXC,EAAgC,MAAtB/K,EAAI8K,cAEpB,GAAc,IAAVxG,IAAgBhB,IAAQuH,EAK5B,IAAKZ,IAAOD,IAAU1G,IAAQuH,GAK9B,GAAKlI,EAAL,CASA,GALI9B,GACFwH,GAAK1F,EAAQnD,EAAUqB,GAIrByC,EAKF,GAJoB9D,EACjBuG,QAAO,SAAAnI,GAAM,MAAoB,MAAhBA,EAAOzB,MAAsC,MAAtByB,EAAO+K,MAAMxM,QACrDiF,OAEeuB,EAAOiB,OAAOpF,SAAU,CACxC,IAAMsK,EAASnG,EAAOiB,OAAOE,IAAInB,GACjCA,EAAO+C,QAAQa,KAAKuC,GAIxB,GAAIjI,GAAagK,GAAQvH,EAAM,CAAC,IAAD,EACM8F,GAAa5J,GAAxCgK,EADqB,EACrBA,YAAaX,EADQ,EACRA,UAGrBgB,EAAYL,GACZO,EAAUlB,GAINA,EAAUG,aACZqB,EAAU1H,GAIVoI,GACFb,UAvCAC,SALAD,MA8CD,CAAC1K,EAAU6K,EAAWF,EAAa7F,EAAO0F,EAAMC,IAUnD,OARAe,qBAAU,WAGR,OAFAC,OAAOC,iBAAiB,UAAWZ,GAE5B,WACLW,OAAOE,oBAAoB,UAAWb,MAEvC,CAACA,IAGF,kBAAC5O,EAAD,KACa,IAAV4I,EAEC,kBAACtI,EAAD,KACE,wCACA,4BAAQoP,QAASlB,GAAjB,SAIF,kBAACrO,EAAD,CAAckC,UAAW,gBAAiBzC,OAAwB,IAAjBwO,EAAOxO,QACpD2O,GAAOD,IACP,kBAAC/N,EAAD,KACE,4BAAKgO,EAAM,WAAa,YACxB,4BAAQmB,QAASjB,GAAjB,kBAGJ,kBAAC,EAAD,CAAK3K,SAAUA,OCvHL6L,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.91150c22.chunk.js","sourcesContent":["import styled, { css } from 'styled-components'\n\nconst shake = css`\n  @keyframes shake {\n    20% {\n      transform: translate3d(4px, -4px, 0);\n    }\n    40% {\n      transform: translate3d(-4px, 4px, 0);\n    }\n    60% {\n      transform: translate3d(4px, 4px, 0);\n    }\n    80% {\n      transform: translate3d(-4px, -4px, 0);\n    }\n  }\n\n  animation-duration: 0.2s;\n  animation-fill-mode: forwards;\n  animation-timing-function: cubic-bezier(.36,.07,.19,.97);\n`\n\nconst grow = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  animation-name: grow;\n  animation-duration: 0.2s;\n  animation-fill-mode: forwards;\n`\n\nconst centered = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const AppContainer = styled.div`\n  ${centered}\n`;\n\nexport const MapContainer = styled.div`\n  ${shake}\n  ${grow}\n  ${centered}\n  animation-name: ${props => props.shake ? 'shake, grow' : undefined};\n`;\n\nexport const MenuContainer = styled.div`\n  ${centered}\n  animation-name: 'shake';\n  flex-direction: column;\n`;\n\nexport const Overlay = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  position: absolute;\n  z-index: 999;\n  background-color: beige;\n  padding: 2rem;\n\n  h2, button {\n    color: #4135ff;\n  }\n\n  button:hover {\n    background-color: #4135ff;\n    border-color: #4135ff;\n    color: beige\n  }\n\n  h2 {\n    font-size: 3rem;\n    line-height: 3rem;\n    margin: 0rem;\n    margin-bottom: 1rem;\n  }\n`;","import React from 'react';\nimport { CELL_SIZE } from '../constants';\nimport styled from 'styled-components'\nimport './Entity.css';\n\nconst getColour = (char) => {\n  const mapping = {\n    '@': '#fffa03',\n    '#': 'black',\n    '+': 'beige',\n    '>': 'yellow',\n    '*': 'yellow',\n    'b': 'yellow',\n    'ó': 'yellow',\n    'S': 'white',\n  }\n  \n  return mapping[char] || 'tomato';\n}\n\nconst getBackgroundColour = (char) => {\n  const mapping = {\n    '#': 'beige',\n    '+': '#4135ff',\n    'S': '#AAAAFF77',\n  }\n  return mapping[char] || 'transparent'\n}\n\nconst getZIndex = (solid, char) => {\n  if (char === 'S') {\n    return 3;\n  }\n  if (solid) {\n    return 2;\n  }\n  \n  return 1;\n}\n\nconst Container = styled.div.attrs(({ x, y, solid, char }) => ({\n  style: {\n    left: x * CELL_SIZE + 'px',\n    top: y * CELL_SIZE + 'px',\n    zIndex: getZIndex(solid, char),\n    color: getColour(char),\n  }\n}))`\n  position: relative;\n  width: 0;\n  height: 0;\n`;\n\nconst Inner = styled.div.attrs(({ char }) => ({\n  style: {\n    opacity: char !== '·' ? '100%' : '10%',\n    width: CELL_SIZE + 'px',\n    height: CELL_SIZE + 'px',\n    backgroundColor: getBackgroundColour(char),\n  }\n}))`\n  width: CELL_SIZE;\n  height: CELL_SIZE;\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:hover {\n    border: solid 2px white;\n    cursor: pointer;\n    p {\n      color: white;\n    }\n    background-color: navy;\n    opacity: 1;\n  }\n\n  p {\n    display: inline;\n    margin-block-start: 0.2rem;\n    margin-block-end: 0;\n    font-weight: 700;\n  }\n`;\n\nconst getBumpClass = (status)=> {\n  if (status.attacking) {\n    const {x, y} = status.attacking;\n    if (x < 0) {\n      return 'bump-left'\n    }\n    if (x > 0) {\n      return 'bump-right'\n    }\n    if (y < 0) {\n      return 'bump-up'\n    }\n    if (y > 0) {\n      return 'bump-down'\n    }\n  }\n\n  return '';\n}\n\nconst getShakeClass = (char, health)=> {\n  if (char === 'b' && health === 1) {\n    return 'shake';\n  }\n\n  return '';\n}\n\nconst getDisplayChar = (char, health) => {\n\n  if (char === '+') {\n    return '#';\n  }\n\n  if (char === '#') {\n    return '#';\n  }\n\n  if (char === 'b') {\n    return health;\n  }\n\n  return char;\n}\n\nconst Cell = ({entity, hoverStart}) => {\n  const {char, position: {x, y}, solid, status, health} = entity;\n  return (\n    <Container x={x} y={y} solid={solid} char={char}>\n      <Inner\n        char={char}\n        className={`${getBumpClass(status)} ${getShakeClass(char, health)}`}\n        onMouseEnter={() => hoverStart(entity)}\n      >\n        <p>{getDisplayChar(char, health)}</p>\n      </Inner>\n    </Container>\n  )\n}\n\nexport default Cell;","export const CELL_SIZE = 30;\nexport const MAP_WIDTH = 13;\nexport const MAP_HEIGHT = 13;","import React, { useState } from 'react';\nimport styled from 'styled-components'\nimport Entity from '../entity/Entity';\nimport { CELL_SIZE, MAP_WIDTH, MAP_HEIGHT } from '../constants';\n\nconst ColumnLayout = styled.div`\n  flex-direction: column;\n`\n\nconst MapContainer = styled.div`\n  width: ${props => props.width}px;\n  height: ${props => props.height}px;\n  font-size: ${CELL_SIZE / 15}rem;\n  margin-bottom: 1rem;\n`\n\nconst InfoBox = styled.div`\n  justify-content: center;\n  align-content: center;\n  flex-direction: column;\n  display: flex;\n  width: ${props => props.width}px;\n  height: 5rem;\n  p {\n    text-align: center;\n    line-height: 1.5rem;\n    font-size: 1.2rem;\n    color: white;\n    font-weight: 400;\n    margin-top: 0.6rem;\n  }\n`\n\nconst StatsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  span {\n    display: inline-block;\n  }\n  .trait {\n    color: yellow;\n    font-weight: 600;\n  }\n`\n\nconst getCapacityText = (capacity)=> {\n  console.log(capacity);\n  const options = ['', 'large', 'plentiful'];\n  return options[capacity - 1];\n}\n\nconst getPowerText = (power)=> {\n  const options = [null, 'powerful', 'very powerful', 'dangerously powerful']\n  return options[power - 1];\n}\n\nconst getRadiusText = (radius)=> {\n  const options = [null, 'large radius', 'very large radius', 'dangerously large radius'];\n  return options[radius - 1];\n}\n\nconst getTimerText = (timer)=> {\n  let text = null;\n  if (timer === 2) {\n    text = 'short fuse'\n  }\n  if (timer === 5) {\n    text = 'long fuse'\n  }\n  return text;\n}\n\nconst Stats = ({hovered}) => {\n  if (!hovered || !hovered.stats) {\n    // returning empty stats container to prevent the height from shifting\n    return <StatsContainer><p></p></StatsContainer>;\n  }\n\n  const { capacity, power, radius, timer } = hovered.stats;\n\n  const capacityText = getCapacityText(capacity);\n  const powerText = getPowerText(power);\n  const radiusText = getRadiusText(radius);\n  const timerText = getTimerText(timer);\n\n  return (\n  <StatsContainer>\n    <p>\n      <span>A</span>\n      { \" \" }\n      {capacityText && <span className=\"trait\">{capacityText} </span>}\n      { \" \" }\n      <span>bomb bag</span>\n      { \" \" }\n      {(powerText || radiusText || timerText) && <span>with</span>}\n      { \" \" }\n      {powerText && <span className=\"trait\">{powerText} </span>}\n      { \" \" }\n      {radiusText && <span className=\"trait\">{radiusText} </span>}\n      { \" \" }\n      {timerText && <span className=\"trait\">{timerText} </span>}\n      { \" \" }\n      {(powerText || radiusText || timerText) && <span>bombs</span>}\n    </p>\n  </StatsContainer>\n  );\n}\n\nconst Map = ({entities}) => {\n  const [hovered, setHovered] = useState({});\n  const hoverStart = (entity) => {\n    setHovered(entity);\n  }\n  const hoverStop = () => {\n    setHovered(null);\n  }\n\n  const isBombBag = (hovered && hovered.stats);\n\n  return (\n    <ColumnLayout>\n      <MapContainer\n        width={MAP_WIDTH * CELL_SIZE}\n        height={MAP_HEIGHT * CELL_SIZE}\n        onMouseLeave={hoverStop}\n      >\n        {entities.map(entity =>\n          <Entity\n            entity={entity}\n            key={entity.id}\n            hoverStart={hoverStart}\n          />\n        )}\n      </MapContainer>\n      <InfoBox width={MAP_WIDTH * CELL_SIZE}>\n        {!isBombBag && <p>{hovered ? hovered.description : ''}</p>}\n        {isBombBag && <Stats hovered={hovered} />}\n      </InfoBox>\n    </ColumnLayout>\n  )\n}\n\nexport default Map;","import { traverseStairs, explodeOnDeath, attackSelf, pickUpWeapons } from '../entity/behaviours';\nimport { starterBombBag } from './weapons';\n\nlet _id = 0;\nconst makeId = ()=> _id++;\n\nexport const makeEntity = (props) => {\n  if (!props.position) console.error('entity was created without a position', props);\n  if (props.id) console.error('Entity should probably not have a custom ID');\n\n  return {\n    id: makeId(),\n    char: '?',\n    weapon: null,\n    facing: {x: 0, y: 1},\n    alive: true,\n    solid: false,\n    behaviours: [],\n    actions: [],\n    actionsPerTurn: 1,\n    status: {},\n    health: 1,\n    description: '',\n    ...props,\n  }\n};\n\nexport const findPlayer = entities => entities.find(entity => entity.char === '@');\n\nexport const empty = (props) => {\n  return makeEntity({\n    char: '·',\n    solid: false,\n    ...props,\n  });\n}\n\nexport const player = (props) => {\n  return makeEntity({\n    char: '@',\n    solid: false,\n    health: 1,\n    behaviours: [traverseStairs, pickUpWeapons],\n    description: \"It's you, the player\",\n    weapon: starterBombBag(1),\n    ...props,\n  })\n};\n\nexport const bomb = (props) => {\n  return makeEntity({\n    char: 'b',\n    solid: true,\n    behaviours: [explodeOnDeath],\n    description: \"You see a bomb. It is set to go off\",\n    health: 3,\n    power: 1,\n    radius: 1,\n    speed: 'full',\n    ...props,\n  })\n};\n\nexport const flame = (props) => {\n  return makeEntity({\n    char: '*',\n    solid: false,\n    behaviours: [attackSelf],\n    health: 1,\n    ...props,\n  })\n};\n\nexport const staircase = (props, upOrDown = 'down') => {\n  return makeEntity({\n    char: upOrDown === 'down' ? '>' : '<',\n    health: 999,\n    description: \"You see a staircase leading down\",\n    ...props,\n  })\n};\n\nexport const wall = (props, breakable = true) => {\n  return makeEntity({\n    char: breakable ? '+' : '#',\n    health: breakable ? 1 : 999,\n    solid: true,\n    description: `You see a wall. ${!breakable ? 'It seems unbreakable.' : ''}`,\n    ...props,\n  })\n};","import { rotate } from 'vector-math-fp';\n\nexport const [UP, DOWN, LEFT, RIGHT] = [{x: 0, y: -1}, {x: 0, y: 1}, {x: -1, y: 0}, {x: 1, y: 0}]\nexport const add = (a, b) => ({x: a.x + b.x, y: a.y + b.y});\nexport const subtract = (a, b) => ({x: a.x - b.x, y: a.y - b.y});\n\nexport const turn = (angle, direction) => {\n  const {x, y} = direction;\n  const rotated = rotate(angle, [x, y]);\n  const [rx, ry] = rotated;\n  return {x: rx, y: ry};\n}\n\nexport const shuffle = (original) => {\n  const shuffled = [...original];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n}","/*\nBehaviours are used at the start of a turn to generate a set of actions\n*/\n\nimport { getEntitiesAt, getEntitiesAtPositions, getAdjacentPositions,\n  isWalkable, getPositionsInDirection, isCharInDirection } from '../map/map-util';\nimport { flame, findPlayer } from './entities';\nimport { UP, DOWN, LEFT, RIGHT, add, subtract, turn, shuffle } from '../math';\nimport { remove } from 'lodash';\n\nexport const explodeOnDeath = (entity, entities) => {\n  const {radius, power} = entity;\n  entity.health -= 1;\n  if (entity.health > 0) {\n    return [];\n  } else {\n    const positions = [\n      ...getPositionsInDirection(UP, entity.position, radius, entities),\n      ...getPositionsInDirection(DOWN, entity.position, radius, entities),\n      ...getPositionsInDirection(LEFT, entity.position, radius, entities),\n      ...getPositionsInDirection(RIGHT, entity.position, radius, entities),\n      entity.position,\n    ];\n    const entitiesToAttack = getEntitiesAtPositions(positions, entities);\n\n    const attackActions = entitiesToAttack.map(entity => (\n      {type: 'attack', value: power, target: entity, cost: 0}\n    ));\n\n    // Spawn fire\n    const spawnActions = positions.map(position => (\n      {type: 'spawn', value: 1, entity: flame({position}), cost: 0}\n    ));\n    return [...attackActions, ...spawnActions];\n  }\n}\n\nexport const attackSelf = (entity, entities) => {\n  return [{type: 'attack', value: 1, target: entity, cost: 0}]\n}\n\nexport const walkInALine = (entity, entities) => {\n  const { facing } = entity;\n  return [{type: 'move', direction: facing, cost: 1}]\n}\n\nexport const pursuePlayerInLineOfSight = (entity, entities) => {\n  for (const direction of [UP, DOWN, LEFT, RIGHT]) {\n    const range = 12;\n    if (isCharInDirection('@', direction, entity.position, range, entities)) {\n      return [\n        {type: 'move', direction, cost: 1},\n        {type: 'face', direction, cost: 0}\n      ]\n    }\n\n  }\n  return [];\n}\n\nexport const pursueBombInLineOfSight = (entity, entities) => {\n  for (const direction of [UP, DOWN, LEFT, RIGHT]) {\n    const range = 12;\n    if (isCharInDirection('b', direction, entity.position, range, entities)) {\n      return [\n        {type: 'move', direction, cost: 1},\n        {type: 'face', direction, cost: 0}\n      ]\n    }\n\n  }\n  return [];\n}\n\nexport const pursuePlayerThroughWalls = (entity, entities) => {\n  const player = findPlayer(entities);\n  const x = player.position.x > entity.position.x ? 1 : -1;\n  const y = player.position.y > entity.position.y ? 1 : -1;\n\n  const direction = Math.random() > 0.5 ? {x: 0, y: y} : {x: x, y: 0};\n\n  return [{type: 'move', direction, cost: 1, force: true}];\n}\n\nexport const faceWalkable = (entity, entities) => {\n  const { facing } = entity;\n\n  // The order is intentional. The forward (facing) direction is placed first, so that\n  // the entity will continue moving in that direction if it can.\n  // Turning around is placed at the end, so that turning left / right is favoured.\n  const directions = [facing, turn(-90, facing), turn(90, facing), turn(180, facing)];\n\n  for (const direction of directions) {\n    const position = add(direction, entity.position);\n    if (isWalkable(position, entities)) {\n      return [{type: 'face', direction, cost: 0}]\n    }\n  }\n\n  // Surrounded on all sides, do nothing\n  return [];\n}\n\nexport const attackPlayer = (entity, entities) => {\n  const colliding = getEntitiesAt(entity.position, entities);\n  const player = colliding.find(entity => entity.char === '@');\n\n  if (player) {\n    return [{type: 'attack', value: 1, target: player, cost: 0}];\n  }\n\n  return [];\n}\n\nexport const eatBomb = (entity, entities) => {\n  const adjacent = getAdjacentPositions(entity.position);\n  for (const position of adjacent) {\n    const adjacentEntities = getEntitiesAt(position, entities);\n    const bomb = adjacentEntities.find(entity => entity.char === 'b');\n    if (bomb) {\n      const direction = subtract(position, entity.position);\n      \n      return [\n        {type: 'eat', target: bomb, cost: 0},\n        {type: 'move', direction, cost: 1}\n      ];\n    }\n  }\n\n  return [];\n}\n\nexport const attackAdjacentPlayer = (entity, entities) => {\n  const adjacent = getAdjacentPositions(entity.position);\n  const adjacentEntities = getEntitiesAtPositions(adjacent, entities);\n  const player = adjacentEntities.find(entity => entity.char === '@');\n  if (player) {\n    return [{type: 'attack', value: 1, target: player, cost: 1}];\n  }\n\n  return [];\n}\n\nexport const attackAdjacentPlayerAndDie = (entity, entities) => {\n  const adjacent = getAdjacentPositions(entity.position);\n  const adjacentEntities = getEntitiesAtPositions(adjacent, entities);\n  const player = adjacentEntities.find(entity => entity.char === '@');\n  if (player) {\n    return [\n      {type: 'attack', value: 1, target: player, cost: 1},\n      {type: 'attack', value: 1, target: entity, cost: 1}\n    ];\n  }\n\n  return [];\n}\n\nexport const traverseStairs = (entity, entities) => {\n  const collidingEntities = getEntitiesAt(entity.position, entities);\n  const stairsDown = collidingEntities.find(entity => entity.char === '>');\n  const stairsUp = collidingEntities.find(entity => entity.char === '<');\n\n  if (stairsDown) {\n    return [\n      {type: 'change-level', value: 1, cost: 0},\n    ];\n  }\n\n  if (stairsUp) {\n    return [\n      {type: 'change-level', value: -1, cost: 0},\n    ];\n  }\n\n  return [];\n}\n\nexport const pickUpWeapons = (entity, entities) => {\n  const oldWeapon = entity.weapon;\n  oldWeapon.position = entity.position;\n  \n  const collidingEntities = getEntitiesAt(entity.position, entities);  \n  const newWeapon = collidingEntities.find(entity => entity.use);\n  if (!newWeapon) {\n    return [];\n  }\n\n  // pick up the new weapon\n  entity.weapon = newWeapon;\n  remove(entities, entity => entity.id === newWeapon.id);\n  \n  return [];\n}","import { makeEntity, bomb } from './entities';\nimport { shuffle } from '../math';\n\nconst makeBombBag = (bagProps, bombProps, extraBagProps) => {\n  const weapon = makeEntity({\n    char: 'ó',\n    solid: false,\n    health: 999,\n    capacity: bagProps.capacity || 1,\n    description: 'A standard bomb bag',\n    stats: {\n      radius: bombProps.radius,\n      power: bombProps.power,\n      capacity: bagProps.capacity,\n      // health displayed as timer to users\n      timer: bombProps.health,\n    },\n    use: (entity) => ({\n      type: 'place-bomb',\n      cost: 1,\n      bomb: bomb({...bombProps, position: entity.position})\n    }),\n    ...extraBagProps,\n  });\n\n  return weapon;\n}\n\n// health equates to the number of turns before a bomb explodes\n// capacity is how many bombs can be active at a time\n\nexport const proceduralBombBag = (level, props = {}) => {\n  const points = Math.random() * 3 + level;\n  let numTraits = 1;\n  if (points > 4) {\n    numTraits = 2;\n  } else if (points > 6) {\n    numTraits = 3;\n  }\n\n  const plentifulCapacity = {capacity: 3};\n  const largeRadius = {radius: 2};\n  const veryLargeRadius = {radius: 3};\n  const shortFuse = {health: 2};\n  const longFuse = {health: 5};\n  const powerful = {power: 2};\n  \n  let bagProps = {};\n  let bombProps = {};\n\n  const availableTraits = shuffle([plentifulCapacity, largeRadius, veryLargeRadius, shortFuse, longFuse, powerful]);\n  const traits = availableTraits.slice(0, numTraits);\n  for (const trait of traits) {\n    if (trait === plentifulCapacity) {\n      bagProps = {...bagProps, ...trait}\n    }\n    else {\n      bombProps = {...bombProps, ...trait}\n    }\n  }\n  \n  return makeBombBag(bagProps, bombProps, props);\n}\n\nexport const starterBombBag = (level, props = {}) => {\n  const bagProps = {\n    capacity: Math.max(Math.ceil(Math.random() * level * 0.75), 3),\n    description: 'A standard bomb bag',\n  }\n  const bombProps = {\n    radius: Math.ceil(Math.random() * level),\n    health: 3,\n    power: 1,\n  };\n  return makeBombBag(bagProps, bombProps, props);\n}\n\nconst weapons = [proceduralBombBag];\n\nexport const getRandomWeapon = () => {\n  const shuffled = shuffle(weapons);\n  const weapon = shuffled[0];\n  \n  return weapon;\n}","import { MAP_WIDTH, MAP_HEIGHT } from '../constants';\nimport { UP, DOWN, LEFT, RIGHT, add } from '../math';\nimport { isEqual } from 'lodash';\nimport { findPlayer } from '../entity/entities';\n\nexport const getEntitiesAt = (position, entities) =>\n  entities.filter(entity => isEqual(entity.position, position));\n\nexport const getEntitiesAtPositions = (positions, entities) => (\n  positions.map(position => getEntitiesAt(position, entities)).flat()\n);\n\nexport const isAdjacentEdge = ({x, y}) =>\n  x === 0 || x === MAP_WIDTH - 1 || y === 0 || y === MAP_HEIGHT - 1;\n\nexport const getAdjacentPositions = (position) => [\n  add(UP, position), add(DOWN, position), add(LEFT, position), add(RIGHT, position)\n];\n\nexport const getPositionsInDirection = (direction, startPosition, distance) => {\n  const positions = [];\n  while (distance > 0) {\n    const scaledDirection = {x: direction.x * distance, y: direction.y * distance};\n    const offsetPosition = add(startPosition, scaledDirection);\n    positions.push(offsetPosition);\n    distance -= 1;\n  }\n  return positions;\n};\n\nexport const isCharInDirection = (char, direction, startPosition, distance, entities) => {\n  const positions = getPositionsInDirection(direction, startPosition, distance);\n  for (const position of positions.reverse()) {\n    const entitiesAtPosition = getEntitiesAt(position, entities);\n    for (const entity of entitiesAtPosition) {\n      if (entity.char === char) {\n        return true;\n      }\n      else if (entity.solid) {\n        return false;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isWalkable = (position, entities) => {\n  const entitiesAtPostion = getEntitiesAt(position, entities);\n\n  // nothing there at all\n  if (entitiesAtPostion.length === 0) {\n    return true;\n  }\n\n  // something solid there\n  if (entitiesAtPostion.some(entity => entity.solid)) {\n    return false;\n  }\n\n  // something there, but it can be walked over\n  return true;\n}","import { walkInALine, faceWalkable, attackPlayer, pursuePlayerInLineOfSight,\n  pursueBombInLineOfSight, eatBomb, pursuePlayerThroughWalls } from './behaviours';\nimport { makeEntity } from './entities';\n\nexport const gooblini = (props) => {\n  return makeEntity({\n    char: 'G',\n    solid: true,\n    behaviours: [walkInALine, faceWalkable, attackPlayer],\n    name: 'Gooblini',\n    description: \"Basic enemy, but best not touch it\",\n    ...props,\n  })\n};\n\nexport const charger = (props) => {\n  return makeEntity({\n    char: 'C',\n    solid: true,\n    behaviours: [pursuePlayerInLineOfSight, walkInALine, attackPlayer],\n    name: 'Charger',\n    description: 'If it sees you, it charges toward you',\n    ...props,\n  })\n};\n\nexport const eater = (props) => {\n  return makeEntity({\n    char: 'E',\n    solid: true,\n    behaviours: [eatBomb, pursueBombInLineOfSight, attackPlayer],\n    name: 'Bombeater',\n    description: 'Eats bombs, om nom',\n    ...props,\n  })\n};\n\nexport const spooky = (props) => {\n  return makeEntity({\n    char: 'S',\n    solid: false,\n    health: 99,\n    speed: 'half',\n    behaviours: [pursuePlayerThroughWalls, attackPlayer],\n    name: 'Spooky ghost',\n    description: 'Oooooo spooky',\n    ...props,\n  })\n};\n\nexport const getRandomEnemy = (level, props) => {\n  const levels = [\n    [gooblini, eater],\n    [gooblini, charger, eater],\n    [gooblini, charger, eater],\n    [gooblini, charger, eater],\n    [gooblini, charger, eater],\n  ];\n\n  const available = levels[level - 1];\n  const index = Math.floor(Math.random() * available.length);\n  return available[index](props);\n}","import { MAP_WIDTH, MAP_HEIGHT } from '../constants';\nimport { isAdjacentEdge, getAdjacentPositions } from '../map/map-util';\nimport { empty, staircase, wall } from '../entity/entities';\nimport { getRandomEnemy } from '../entity/enemies';\nimport { getRandomWeapon } from '../entity/weapons';\nimport { shuffle } from '../math';\nimport { isEqual } from 'lodash';\n\nexport const makeRoomWithPlayerAndWalls = (player) => {\n  const entities = [player];\n\n  for (let x = 0; x < MAP_WIDTH; x += 1) {\n    for (let y = 0; y < MAP_HEIGHT; y += 1) {\n      const position = {x, y};\n      // don't place anything where the player is\n      if (isEqual(position, player.position)) {\n        continue;\n      }\n\n      // don't place anything next to where the player is unless it is an edge wall\n      const adjacentPositons = getAdjacentPositions(player.position);\n      const isAdjacentPlayer = adjacentPositons.find(adjPosition => isEqual(position, adjPosition));\n      if (!isAdjacentEdge(position) && isAdjacentPlayer) {\n        continue;\n      }\n\n      if (isAdjacentEdge(position) || (x % 2 === 0 && y % 2 === 0)) {\n        const unbreakableWall = wall({position}, false);\n        entities.push(unbreakableWall);\n      }\n      else if (Math.random() > 0.8) {\n        const breakableWall = wall({position}, true);\n        entities.push(breakableWall);\n      }\n      else {\n        const emptyEntity = empty({position});\n        entities.push(emptyEntity);\n      }\n    }\n  }\n\n  return entities;\n}\n\nexport const generateLevel = (level, player) => {\n  const entities = makeRoomWithPlayerAndWalls(player);\n\n  // Add enemies\n  const emptyEntities = entities.filter(entity => entity.char === '·');\n  let shuffledEmptyEntities = shuffle(emptyEntities);\n  const numEnemies = Math.ceil(level * 1.75);\n  for (let i = 0; i < numEnemies; i += 1) {\n    const emptyEntity = shuffledEmptyEntities.pop();\n\n    const enemy = getRandomEnemy(level, {position: emptyEntity.position});\n    entities.push(enemy);\n  }\n\n  // Add staircase and weapons underneath breakable walls\n  const walls = entities.filter(entity => entity.char === '+')\n  const shuffledWalls = shuffle(walls);\n  const staircaseDown = staircase({\n    position: shuffledWalls.pop().position\n  });\n  entities.push(staircaseDown);\n\n  for (let i = 0; i < 2; i += 1) {\n    const weaponFactory = getRandomWeapon();\n    const bagProps = {position: shuffledWalls.pop().position};\n    const weapon = weaponFactory(level + 1, bagProps);\n    entities.push(weapon);\n  }\n\n  return entities;\n}","import { findPlayer, bomb } from './entity/entities';\nimport { spooky } from './entity/enemies';\nimport { getEntitiesAt } from './map/map-util';\nimport { subtract } from './math';\n\nlet totalTurns = 0;\nconst NUM_TURNS_UNTIL_GHOST = 100;\n\nexport const move = (entity, entities, direction, force = false) => {\n  const newPosition = {\n    x: entity.position.x + direction.x,\n    y: entity.position.y + direction.y\n  }\n\n  // Check if anything is in the way (unless force is true)\n  const upcomingEntities = getEntitiesAt(newPosition, entities);\n  if (!force && upcomingEntities.filter(upcoming => upcoming.solid).length > 0) {\n    return false;\n  }\n\n  entity.position = newPosition\n  return true;\n}\n\nconst placeBomb = (entity, entities, bomb) => {\n  const newBomb = {\n    ...bomb,\n    position: entity.position,\n    owner: entity,\n  }\n\n  entities.push(newBomb);\n}\n\n// **IMPORTANT** Perform actions does a lot of sneaky mutation\n// May mutate any entity (either the supplied entity, but also any entity referenced in an action)\n// May push events into newEvents\nconst performActions = (actions, entity, entities, newEvents) => {\n    while(actions.length > 0) {\n      const action = actions.pop();\n\n      if (entity.actionPoints >= action.cost) {\n        entity.actionPoints -= action.cost\n      } else {\n        continue;\n      }\n\n      if (action.type === 'wait') {\n        entity.status['waiting'] = true;\n      }\n      // similar to attack, but immediately sets target to !alive to avoid triggering explosions\n      if (action.type === 'eat') {\n        action.target.alive = false;\n        action.target.solid = false;\n        newEvents.shake = true;\n      }\n      if (action.type === 'attack') {\n        const { value, target } = action;\n        target.health -= value;\n        entity.status['attacking'] = subtract(target.position, entity.position);\n        newEvents.shake = true;\n      }\n      if (action.type === 'move') {\n        move(entity, entities, action.direction, action.force)\n      }\n      if (action.type === 'spawn') {\n        const { entity } = action;\n        entities.push(entity);\n      }\n      if (action.type === 'place-bomb') {\n        placeBomb(entity, entities, action.bomb)\n      }\n      if (action.type === 'face') {\n        entity.facing = action.direction;\n      }\n      if (action.type === 'change-level') {\n        newEvents.changeLevel = true;\n      }\n    }\n}\n\nconst performTurn = (entity, entities, newEvents) => {\n  // entities with speed 'half' only perform every 2nd turn\n  if (entity.speed === 'half' && totalTurns % 2 === 0) {\n    return\n  }\n\n  // Reset status\n  entity.status = {};\n  entity.actionPoints = entity.actionsPerTurn;\n\n  // Update prev position for each entity\n  entity.prevPosition = {\n    x: entity.position.x,\n    y: entity.position.y\n  };\n\n  // Perform any exisiting actions (likely just from player input)\n  performActions(entity.actions, entity, entities, newEvents);\n\n  // Clear any remaining existing actions for this turn\n  entity.actions = [];\n\n  // Perform any actions generated from behaviours\n  for (const behaviour of entity.behaviours) {\n    const actions = behaviour(entity, entities).reverse();\n    performActions(actions, entity, entities, newEvents);\n  }\n}\n\nexport const performTurns = (entities)=> {\n  const newEvents = {};\n  const player = findPlayer(entities);\n  const everythingElse = entities.filter(entity => entity.id !== player.id);\n\n  for (const entity of [player, ...everythingElse]) {\n    performTurn(entity, entities, newEvents);\n  }\n\n  // Remove anything that is dead\n  for (const entity of entities) {\n    if (entity.health <= 0) {\n      entity.alive = false;\n    }\n  }\n  const remainingEntities = entities.filter(entity => entity.alive);\n\n  totalTurns++;\n  // every nth turn, add a ghost\n  if (totalTurns % NUM_TURNS_UNTIL_GHOST === 0) {\n    const ghost = spooky({position: {x: -3, y: -3}});\n    remainingEntities.push(ghost);\n  }\n\n  return {\n    newEntities: remainingEntities,\n    newEvents\n  };\n}","import React, { useState, useEffect, useCallback } from 'react';\nimport { AppContainer, MapContainer, MenuContainer, Overlay } from './containers';\nimport Map from './map/Map';\nimport { generateLevel } from './map/map-generation';\nimport { player, findPlayer } from './entity/entities';\nimport { performTurns, move } from './turn';\nimport './App.css';\n\nconst NUM_LEVELS = 5;\n\nconst initialLevel = 1;\nconst initialPlayer = player({position: {x: 1, y: 1}});\nconst initialEntities = generateLevel(initialLevel, {...initialPlayer})\n\nfunction App() {\n  const [level, setLevel] = useState(initialLevel);\n  const [entities, setEntities] = useState(initialEntities);\n  const [events, setEvents] = useState({});\n  const lose = !findPlayer(entities);\n  const win = level > NUM_LEVELS;\n\n  const startGame = () => {\n    setLevel(1);\n    setEntities(generateLevel(1, {...initialPlayer}));\n  }\n\n  const backToTitle = useCallback(() => {\n    setLevel(0);\n    setEntities(generateLevel(level, {...initialPlayer}));\n  }, [level]);\n\n  const nextLevel = useCallback(player => {\n    setLevel(level + 1);\n    if (level < NUM_LEVELS) {\n      setEntities(generateLevel(level + 1, player));\n    }\n  }, [level]);\n\n  const keyToDirection = (key) => {\n    const mapping = {\n      ArrowUp: {x: 0, y: -1},\n      ArrowDown: {x: 0, y: 1},\n      ArrowLeft: {x: -1, y: 0},\n      ArrowRight: {x: 1, y: 0}\n    }\n\n    return mapping[key];\n  }\n\n  const handleKeyDown = useCallback(event => {\n    const player = findPlayer(entities);\n    const { key } = event;\n    const direction = keyToDirection(key);\n    const wait = key.toLowerCase() === 'z';\n    const bomb = key.toLowerCase() === 'x';\n    const restart = key.toLowerCase() === 'r'\n\n    if (level === 0 && (bomb || wait)) {\n      startGame();\n      return;\n    }\n\n    if ((win || lose) && (bomb || wait)) {\n      backToTitle();\n      return;\n    }\n\n    if (!player) {\n      return;\n    }\n\n    if (direction) {\n      move(player, entities, direction);\n      // player.actions.push({type: 'move', direction, cost: 1})\n    }\n\n    if (bomb) {\n      const numBombsOut = entities\n        .filter(entity => entity.char === 'b' && entity.owner.char === '@')\n        .length;\n      \n      if (numBombsOut < player.weapon.capacity) {\n        const action = player.weapon.use(player);\n        player.actions.push(action);\n      }\n    }\n\n    if (direction || wait || bomb) {\n      const { newEntities, newEvents } = performTurns(entities);\n\n      // Update state\n      setEntities(newEntities);\n      setEvents(newEvents);\n\n      // Apply certain events now\n      // Others like screenshake will react to props change after setEvents is called\n      if (newEvents.changeLevel) {\n        nextLevel(player);\n      }\n    }\n\n    if (restart) {\n      startGame();\n    }\n  }, [entities, nextLevel, backToTitle, level, lose, win]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n\n  return (\n    <AppContainer>\n      {level === 0 ?\n        // Title screen\n        <MenuContainer>\n          <h1>bomblike</h1>\n          <button onClick={startGame}>play</button>\n        </MenuContainer>\n      :\n        // Main game screen\n        <MapContainer className={'map-container'} shake={events.shake === true}>\n          {(win || lose) && (\n            <Overlay>\n              <h2>{win ? 'Success!' : 'You died'}</h2>\n              <button onClick={backToTitle}>Back to title</button>\n            </Overlay>\n          )}\n          <Map entities={entities} />\n        </MapContainer>\n      }\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}