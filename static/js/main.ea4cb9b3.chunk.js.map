{"version":3,"sources":["containers.js","entity/Entity.js","constants.js","map/Map.js","entity/entities.js","math.js","entity/enemies.js","entity/behaviours.js","entity/weapons.js","map/map-util.js","map/map-generation.js","turn.js","App.js","serviceWorker.js","index.js"],"names":["shake","css","grow","centered","AppContainer","styled","div","MapContainer","props","undefined","MenuContainer","Overlay","getColour","char","getBackgroundColour","getZIndex","solid","Container","attrs","x","y","style","left","top","zIndex","color","Inner","opacity","width","CELL_SIZE","height","backgroundColor","getBumpClass","status","attacking","getShakeClass","health","Cell","entity","hoverStart","position","className","onMouseEnter","getDisplayChar","ColumnLayout","InfoBox","StatsContainer","Stats","hovered","stats","capacity","power","radius","timer","capacityText","getCapacityText","powerText","getPowerText","radiusText","getRadiusText","timerText","text","getTimerText","Map","entities","useState","setHovered","isBombBag","MAP_WIDTH","MAP_HEIGHT","onMouseLeave","map","key","id","description","UP","DOWN","LEFT","RIGHT","add","a","b","subtract","turn","angle","direction","rotated","rotate","shuffle","original","shuffled","i","length","j","Math","floor","random","gooblini","makeEntity","behaviours","walkInALine","faceWalkable","attackPlayer","name","charger","pursuePlayerInLineOfSight","eater","eatBomb","pursueBombInLineOfSight","ghostSpawner","spawnGhostOnDeath","visible","getRandomEnemy","level","available","isAttackable","containsAttackable","getEntitiesAt","find","explodeOnDeath","attackPositions","spawnPositions","positions","getPositionsInDirection","firstSolidIndex","findIndex","push","slice","attackActions","getEntitiesAtPositions","type","value","target","cost","spawnActions","flame","speed","pursuePlayerThroughWalls","attackSelf","facing","isCharInDirection","player","findPlayer","force","isWalkable","adjacent","getAdjacentPositions","bomb","traverseStairs","collidingEntities","stairsDown","stairsUp","pickUpWeapons","weapon","newWeapon","use","remove","makeBombBag","bagProps","bombProps","extraBagProps","starterBombBag","ceil","weapons","points","numTraits","plentifulCapacity","largeRadius","veryLargeRadius","shortFuse","longFuse","availableTraits","traits","trait","getRandomWeapon","_id","console","error","alive","actions","actionsPerTurn","wall","breakable","filter","isEqual","flat","isAdjacentEdge","startPosition","distance","scaledDirection","offsetPosition","reverse","entitiesAtPosition","entitiesAtPostion","some","generateStandardLevel","emptyEntities","isAdjacentPlayer","adjPosition","unbreakableWall","emptyEntity","shuffledEmptyEntities","maxThings","numBreakableWalls","min","remainingRandomSpots","numHoles","pop","makeRoomWithPlayerAndWalls","numEnemies","enemy","spawner","walls","shuffledWalls","staircaseDown","upOrDown","staircase","weaponFactory","generateLevel","totalTurns","move","newPosition","upcomingEntities","upcoming","placeBomb","newBomb","owner","performActions","newEvents","action","actionPoints","changeLevel","performTurn","prevPosition","behaviour","initialPlayer","initialEntities","App","setLevel","setEntities","events","setEvents","lose","win","startGame","backToTitle","useCallback","nextLevel","handleKeyDown","event","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","keyToDirection","wait","toLowerCase","restart","everythingElse","remainingEntities","newEntities","performTurns","useEffect","window","addEventListener","removeEventListener","onClick","e","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea4cb9b3.chunk.js","sourcesContent":["import styled, { css } from 'styled-components'\n\nconst shake = css`\n  @keyframes shake {\n    20% {\n      transform: translate3d(4px, -4px, 0);\n    }\n    40% {\n      transform: translate3d(-4px, 4px, 0);\n    }\n    60% {\n      transform: translate3d(4px, 4px, 0);\n    }\n    80% {\n      transform: translate3d(-4px, -4px, 0);\n    }\n  }\n\n  animation-duration: 0.2s;\n  animation-fill-mode: forwards;\n  animation-timing-function: cubic-bezier(.36,.07,.19,.97);\n`\n\nconst grow = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  animation-name: grow;\n  animation-duration: 0.2s;\n  animation-fill-mode: forwards;\n`\n\nconst centered = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const AppContainer = styled.div`\n  ${centered}\n`;\n\nexport const MapContainer = styled.div`\n  ${shake}\n  ${grow}\n  ${centered}\n  animation-name: ${props => props.shake ? 'shake, grow' : undefined};\n`;\n\nexport const MenuContainer = styled.div`\n  ${centered}\n  animation-name: 'shake';\n  flex-direction: column;\n`;\n\nexport const Overlay = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  position: absolute;\n  z-index: 999;\n  background-color: beige;\n  padding: 2rem;\n\n  h2, button {\n    color: #4135ff;\n  }\n\n  button:hover {\n    background-color: #4135ff;\n    border-color: #4135ff;\n    color: beige\n  }\n\n  h2 {\n    font-size: 3rem;\n    line-height: 3rem;\n    margin: 0rem;\n    margin-bottom: 1rem;\n  }\n`;","import React from 'react';\nimport { CELL_SIZE } from '../constants';\nimport styled from 'styled-components'\nimport './Entity.css';\n\nconst getColour = (char) => {\n  const mapping = {\n    '@': '#fffa03',\n    '#': 'black',\n    '+': 'beige',\n    '>': 'yellow',\n    '*': 'yellow',\n    'b': 'yellow',\n    'ó': 'yellow',\n    'S': 'white',\n    '❒': 'white',\n  }\n  \n  return mapping[char] || 'tomato';\n}\n\nconst getBackgroundColour = (char) => {\n  const mapping = {\n    '#': 'beige',\n    '+': '#4135ff',\n    'S': '#AAAAFF77',\n    '❒': 'black',\n  }\n  return mapping[char] || 'transparent'\n}\n\nconst getZIndex = (solid, char) => {\n  if (char === '❒') {\n    return 1;\n  }\n  if (char === 'S') {\n    return 3;\n  }\n  if (solid || char === 'b') {\n    return 2;\n  }\n  \n  return 1;\n}\n\nconst Container = styled.div.attrs(({ x, y, solid, char }) => ({\n  style: {\n    left: x * CELL_SIZE + 'px',\n    top: y * CELL_SIZE + 'px',\n    zIndex: getZIndex(solid, char),\n    color: getColour(char),\n  }\n}))`\n  position: relative;\n  width: 0;\n  height: 0;\n`;\n\nconst Inner = styled.div.attrs(({ char }) => ({\n  style: {\n    opacity: char !== '·' ? '100%' : '10%',\n    width: CELL_SIZE + 'px',\n    height: CELL_SIZE + 'px',\n    backgroundColor: getBackgroundColour(char),\n  }\n}))`\n  width: CELL_SIZE;\n  height: CELL_SIZE;\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:hover {\n    border: solid 2px white;\n    cursor: pointer;\n    p {\n      color: white;\n    }\n    background-color: navy;\n    opacity: 1;\n  }\n\n  p {\n    display: inline;\n    margin-block-start: 0.2rem;\n    margin-block-end: 0;\n    font-weight: 700;\n  }\n`;\n\nconst getBumpClass = (status)=> {\n  if (status.attacking) {\n    const {x, y} = status.attacking;\n    if (x < 0) {\n      return 'bump-left'\n    }\n    if (x > 0) {\n      return 'bump-right'\n    }\n    if (y < 0) {\n      return 'bump-up'\n    }\n    if (y > 0) {\n      return 'bump-down'\n    }\n  }\n\n  return '';\n}\n\nconst getShakeClass = (char, health)=> {\n  if (char === 'b' && health === 1) {\n    return 'shake';\n  }\n\n  return '';\n}\n\nconst getDisplayChar = (char, health) => {\n\n  if (char === '+') {\n    return '#';\n  }\n\n  if (char === '#') {\n    return '#';\n  }\n\n  if (char === 'b') {\n    return health;\n  }\n\n  if (char === '❒') {\n    return '';\n  }\n\n  return char;\n}\n\nconst Cell = ({entity, hoverStart}) => {\n  const {char, position: {x, y}, solid, status, health} = entity;\n  return (\n    <Container x={x} y={y} solid={solid} char={char}>\n      <Inner\n        char={char}\n        className={`${getBumpClass(status)} ${getShakeClass(char, health)}`}\n        onMouseEnter={() => hoverStart(entity)}\n      >\n        <p>{getDisplayChar(char, health)}</p>\n      </Inner>\n    </Container>\n  )\n}\n\nexport default Cell;","export const CELL_SIZE = 30;\nexport const MAP_WIDTH = 9;\nexport const MAP_HEIGHT = 9;","import React, { useState } from 'react';\nimport styled from 'styled-components'\nimport Entity from '../entity/Entity';\nimport { CELL_SIZE, MAP_WIDTH, MAP_HEIGHT } from '../constants';\n\nconst ColumnLayout = styled.div`\n  flex-direction: column;\n`\n\nconst MapContainer = styled.div`\n  width: ${props => props.width}px;\n  height: ${props => props.height}px;\n  font-size: ${CELL_SIZE / 15}rem;\n  margin-bottom: 1rem;\n`\n\nconst InfoBox = styled.div`\n  justify-content: center;\n  align-content: center;\n  flex-direction: column;\n  display: flex;\n  width: ${props => props.width}px;\n  height: 5rem;\n  p {\n    text-align: center;\n    line-height: 1.5rem;\n    font-size: 1.2rem;\n    color: white;\n    font-weight: 400;\n    margin-top: 0.6rem;\n  }\n`\n\nconst StatsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  span {\n    display: inline-block;\n  }\n  .trait {\n    color: yellow;\n    font-weight: 600;\n  }\n`\n\nconst getCapacityText = (capacity)=> {\n  const options = ['', 'large', 'plentiful'];\n  return options[capacity - 1];\n}\n\nconst getPowerText = (power)=> {\n  const options = [null, 'powerful', 'very powerful', 'dangerously powerful']\n  return options[power - 1];\n}\n\nconst getRadiusText = (radius)=> {\n  const options = [null, 'large radius', 'very large radius', 'dangerously large radius'];\n  return options[radius - 1];\n}\n\nconst getTimerText = (timer)=> {\n  let text = null;\n  if (timer === 2) {\n    text = 'short fuse'\n  }\n  if (timer === 5) {\n    text = 'long fuse'\n  }\n  return text;\n}\n\nconst Stats = ({hovered}) => {\n  if (!hovered || !hovered.stats) {\n    // returning empty stats container to prevent the height from shifting\n    return <StatsContainer><p></p></StatsContainer>;\n  }\n\n  const { capacity, power, radius, timer } = hovered.stats;\n\n  const capacityText = getCapacityText(capacity);\n  const powerText = getPowerText(power);\n  const radiusText = getRadiusText(radius);\n  const timerText = getTimerText(timer);\n\n  return (\n  <StatsContainer>\n    <p>\n      <span>A</span>\n      { \" \" }\n      {capacityText && <span className=\"trait\">{capacityText} </span>}\n      { \" \" }\n      <span>bomb bag</span>\n      { \" \" }\n      {(powerText || radiusText || timerText) && <span>with</span>}\n      { \" \" }\n      {powerText && <span className=\"trait\">{powerText} </span>}\n      { \" \" }\n      {radiusText && <span className=\"trait\">{radiusText} </span>}\n      { \" \" }\n      {timerText && <span className=\"trait\">{timerText} </span>}\n      { \" \" }\n      {(powerText || radiusText || timerText) && <span>bombs</span>}\n    </p>\n  </StatsContainer>\n  );\n}\n\nconst Map = ({entities}) => {\n  const [hovered, setHovered] = useState({});\n  const hoverStart = (entity) => {\n    setHovered(entity);\n  }\n  const hoverStop = () => {\n    setHovered(null);\n  }\n\n  const isBombBag = (hovered && hovered.stats);\n\n  return (\n    <ColumnLayout>\n      <MapContainer\n        width={MAP_WIDTH * CELL_SIZE}\n        height={MAP_HEIGHT * CELL_SIZE}\n        onMouseLeave={hoverStop}\n      >\n        {entities.map(entity =>\n          <Entity\n            entity={entity}\n            key={entity.id}\n            hoverStart={hoverStart}\n          />\n        )}\n      </MapContainer>\n      <InfoBox width={MAP_WIDTH * CELL_SIZE}>\n        {!isBombBag && <p>{hovered ? hovered.description : ''}</p>}\n        {isBombBag && <Stats hovered={hovered} />}\n      </InfoBox>\n    </ColumnLayout>\n  )\n}\n\nexport default Map;","import { traverseStairs, explodeOnDeath, attackSelf, pickUpWeapons } from '../entity/behaviours';\nimport { starterBombBag } from './weapons';\n\nlet _id = 0;\nconst makeId = ()=> _id++;\n\nexport const makeEntity = (props) => {\n  if (!props.position) console.error('entity was created without a position', props);\n  if (props.id) console.error('Entity should probably not have a custom ID');\n\n  return {\n    id: makeId(),\n    char: '?',\n    weapon: null,\n    facing: {x: 0, y: 1},\n    alive: true,\n    solid: false,\n    behaviours: [],\n    actions: [],\n    actionsPerTurn: 1,\n    status: {},\n    health: 1,\n    description: '',\n    visible: true,\n    ...props,\n  }\n};\n\nexport const findPlayer = entities => entities.find(entity => entity.char === '@');\n\nexport const empty = (props) => {\n  return makeEntity({\n    char: '·',\n    solid: false,\n    ...props,\n  });\n}\n\nexport const player = (props) => {\n  return makeEntity({\n    char: '@',\n    solid: false,\n    health: 1,\n    behaviours: [traverseStairs, pickUpWeapons],\n    description: \"It's you, the player\",\n    weapon: starterBombBag(1),\n    ...props,\n  })\n};\n\nexport const bomb = (props) => {\n  return makeEntity({\n    char: 'b',\n    solid: true,\n    behaviours: [explodeOnDeath],\n    description: \"It's a bomb, and it's going to explode!\",\n    health: 3,\n    power: 1,\n    radius: 1,\n    ...props,\n  })\n};\n\nexport const hole = (props) => {\n  return makeEntity({\n    char: '❒',\n    solid: true,\n    description: \"A hole in the ground\",\n    health: 999,\n    ...props,\n  })\n};\n\nexport const flame = (props) => {\n  return makeEntity({\n    char: '*',\n    solid: false,\n    behaviours: [attackSelf],\n    health: 1,\n    ...props,\n  })\n};\n\nexport const staircase = (props, upOrDown = 'down') => {\n  return makeEntity({\n    char: upOrDown === 'down' ? '>' : '<',\n    health: 999,\n    description: \"You see a staircase leading down\",\n    ...props,\n  })\n};\n\nexport const wall = (props, breakable = true) => {\n  return makeEntity({\n    char: breakable ? '+' : '#',\n    health: breakable ? 1 : 999,\n    solid: true,\n    description: `You see a wall. ${!breakable ? 'It seems unbreakable.' : ''}`,\n    ...props,\n  })\n};","import { rotate } from 'vector-math-fp';\n\nexport const [UP, DOWN, LEFT, RIGHT] = [{x: 0, y: -1}, {x: 0, y: 1}, {x: -1, y: 0}, {x: 1, y: 0}]\nexport const add = (a, b) => ({x: a.x + b.x, y: a.y + b.y});\nexport const subtract = (a, b) => ({x: a.x - b.x, y: a.y - b.y});\n\nexport const turn = (angle, direction) => {\n  const {x, y} = direction;\n  const rotated = rotate(angle, [x, y]);\n  const [rx, ry] = rotated;\n  return {x: rx, y: ry};\n}\n\nexport const shuffle = (original) => {\n  const shuffled = [...original];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n}","import { walkInALine, faceWalkable, attackPlayer, pursuePlayerInLineOfSight,\n  pursueBombInLineOfSight, eatBomb, pursuePlayerThroughWalls,\n  spawnGhostOnDeath } from './behaviours';\nimport { makeEntity } from './entities';\n\nexport const gooblini = (props) => {\n  return makeEntity({\n    char: 'G',\n    solid: true,\n    behaviours: [walkInALine, faceWalkable, attackPlayer],\n    name: 'Gooblini',\n    description: \"Basic enemy, but best not touch it\",\n    ...props,\n  })\n};\n\nexport const charger = (props) => {\n  return makeEntity({\n    char: 'C',\n    solid: true,\n    behaviours: [pursuePlayerInLineOfSight, walkInALine, attackPlayer],\n    name: 'Charger',\n    description: 'If it sees you, it charges toward you',\n    ...props,\n  })\n};\n\nexport const eater = (props) => {\n  return makeEntity({\n    char: 'E',\n    solid: true,\n    behaviours: [eatBomb, pursueBombInLineOfSight, attackPlayer],\n    name: 'Bombeater',\n    description: 'Eats bombs, om nom',\n    ...props,\n  })\n};\n\nexport const spooky = (props) => {\n  return makeEntity({\n    char: 'S',\n    solid: false,\n    health: 99,\n    speed: 'half',\n    behaviours: [pursuePlayerThroughWalls, attackPlayer],\n    name: 'Spooky ghost',\n    description: 'Oooooo spooky',\n    ...props,\n  })\n};\n\nexport const ghostSpawner = (props) => {\n  return makeEntity({\n    char: 's',\n    solid: false,\n    health: 5,\n    behaviours: [spawnGhostOnDeath],\n    name: 'Ghost spawner',\n    description: '',\n    visible: false,\n    ...props,\n  })\n};\n\nexport const getRandomEnemy = (level, props) => {\n  const levels = [\n    [gooblini],\n    [gooblini, charger],\n    [gooblini, charger, eater],\n    [gooblini, charger, eater],\n    [gooblini, charger, eater],\n  ];\n\n  const available = levels[level - 1];\n  const index = Math.floor(Math.random() * available.length);\n  return available[index](props);\n}","/*\nBehaviours are used at the start of a turn to generate a set of actions\n*/\n\nimport { getEntitiesAt, getEntitiesAtPositions, getAdjacentPositions,\n  isWalkable, getPositionsInDirection, isCharInDirection } from '../map/map-util';\nimport { flame, findPlayer } from './entities';\nimport { spooky } from './enemies';\nimport { UP, DOWN, LEFT, RIGHT, add, subtract, turn, shuffle } from '../math';\nimport { remove } from 'lodash';\n\nconst isAttackable = (entity) => {\n  if (entity.char === '❒') {\n    return false;\n  }\n  if (entity.solid || entity.char === '@') {\n    return true;\n  }\n  \n  return false;\n}\n\nconst containsAttackable = (position, entities) => {\n  return getEntitiesAt(position, entities).find(isAttackable)\n}\n\nexport const explodeOnDeath = (entity, entities) => {\n  const {radius, power} = entity;\n  entity.health -= 1;\n  if (entity.health > 0) {\n    return [];\n  } else {\n    const attackPositions = [entity.position];\n    const spawnPositions = [entity.position];\n\n    for (const direction of [UP, DOWN, LEFT, RIGHT]) {\n      const positions = getPositionsInDirection(direction, entity.position, radius, entities)\n      const firstSolidIndex = positions.findIndex(position => containsAttackable(position, entities));\n      if (firstSolidIndex !== -1) {\n        attackPositions.push(positions[firstSolidIndex]);\n        spawnPositions.push(...positions.slice(0, firstSolidIndex + 1));\n      }\n      else {\n        spawnPositions.push(...positions);\n      }\n    }\n\n    const entitiesToAttack = getEntitiesAtPositions(attackPositions, entities);\n\n    const attackActions = entitiesToAttack.map(entity => (\n      {type: 'attack', value: power, target: entity, cost: 0}\n    ));\n\n    // Spawn fire\n    const spawnActions = spawnPositions.map(position => (\n      {type: 'spawn', value: 1, entity: flame({position}), cost: 0}\n    ));\n    return [...attackActions, ...spawnActions];\n  }\n}\n\nexport const spawnGhostOnDeath = (entity, entities) => {\n  entity.health -= 1;\n  if (entity.health > 0) {\n    return [];\n  } else {\n    const { position } = entity;\n    return [{type: 'spawn', value: 1, entity: spooky({position}), cost: 0}]    \n  }\n}\n\nexport const attackSelf = (entity, entities) => {\n  return [{type: 'attack', value: 1, target: entity, cost: 0}]\n}\n\nexport const walkInALine = (entity, entities) => {\n  const { facing } = entity;\n  return [{type: 'move', direction: facing, cost: 1}]\n}\n\nexport const pursuePlayerInLineOfSight = (entity, entities) => {\n  for (const direction of [UP, DOWN, LEFT, RIGHT]) {\n    const range = 12;\n    if (isCharInDirection('@', direction, entity.position, range, entities)) {\n      return [\n        {type: 'move', direction, cost: 1},\n        {type: 'face', direction, cost: 0}\n      ]\n    }\n\n  }\n  return [];\n}\n\nexport const pursueBombInLineOfSight = (entity, entities) => {\n  for (const direction of [UP, DOWN, LEFT, RIGHT]) {\n    const range = 12;\n    if (isCharInDirection('b', direction, entity.position, range, entities)) {\n      return [\n        {type: 'move', direction, cost: 1},\n        {type: 'face', direction, cost: 0}\n      ]\n    }\n\n  }\n  return [];\n}\n\nexport const pursuePlayerThroughWalls = (entity, entities) => {\n  const player = findPlayer(entities);\n  const x = player.position.x > entity.position.x ? 1 : -1;\n  const y = player.position.y > entity.position.y ? 1 : -1;\n\n  const direction = Math.random() > 0.5 ? {x: 0, y: y} : {x: x, y: 0};\n\n  return [{type: 'move', direction, cost: 1, force: true}];\n}\n\nexport const faceWalkable = (entity, entities) => {\n  const { facing } = entity;\n\n  // The order is intentional. The forward (facing) direction is placed first, so that\n  // the entity will continue moving in that direction if it can.\n  // Turning around is placed at the end, so that turning left / right is favoured.\n  const directions = [facing, turn(-90, facing), turn(90, facing), turn(180, facing)];\n\n  for (const direction of directions) {\n    const position = add(direction, entity.position);\n    if (isWalkable(position, entities)) {\n      return [{type: 'face', direction, cost: 0}]\n    }\n  }\n\n  // Surrounded on all sides, do nothing\n  return [];\n}\n\nexport const attackPlayer = (entity, entities) => {\n  const colliding = getEntitiesAt(entity.position, entities);\n  const player = colliding.find(entity => entity.char === '@');\n\n  if (player) {\n    return [{type: 'attack', value: 1, target: player, cost: 0}];\n  }\n\n  return [];\n}\n\nexport const eatBomb = (entity, entities) => {\n  const adjacent = getAdjacentPositions(entity.position);\n  for (const position of adjacent) {\n    const adjacentEntities = getEntitiesAt(position, entities);\n    const bomb = adjacentEntities.find(entity => entity.char === 'b');\n    if (bomb) {\n      const direction = subtract(position, entity.position);\n      \n      return [\n        {type: 'eat', target: bomb, cost: 0},\n        {type: 'move', direction, cost: 1}\n      ];\n    }\n  }\n\n  return [];\n}\n\nexport const attackAdjacentPlayer = (entity, entities) => {\n  const adjacent = getAdjacentPositions(entity.position);\n  const adjacentEntities = getEntitiesAtPositions(adjacent, entities);\n  const player = adjacentEntities.find(entity => entity.char === '@');\n  if (player) {\n    return [{type: 'attack', value: 1, target: player, cost: 1}];\n  }\n\n  return [];\n}\n\nexport const attackAdjacentPlayerAndDie = (entity, entities) => {\n  const adjacent = getAdjacentPositions(entity.position);\n  const adjacentEntities = getEntitiesAtPositions(adjacent, entities);\n  const player = adjacentEntities.find(entity => entity.char === '@');\n  if (player) {\n    return [\n      {type: 'attack', value: 1, target: player, cost: 1},\n      {type: 'attack', value: 1, target: entity, cost: 1}\n    ];\n  }\n\n  return [];\n}\n\nexport const traverseStairs = (entity, entities) => {\n  const collidingEntities = getEntitiesAt(entity.position, entities);\n  const stairsDown = collidingEntities.find(entity => entity.char === '>');\n  const stairsUp = collidingEntities.find(entity => entity.char === '<');\n\n  if (stairsDown) {\n    return [\n      {type: 'change-level', value: 1, cost: 0},\n    ];\n  }\n\n  if (stairsUp) {\n    return [\n      {type: 'change-level', value: -1, cost: 0},\n    ];\n  }\n\n  return [];\n}\n\nexport const pickUpWeapons = (entity, entities) => {\n  const oldWeapon = entity.weapon;\n  oldWeapon.position = entity.position;\n  \n  const collidingEntities = getEntitiesAt(entity.position, entities);  \n  const newWeapon = collidingEntities.find(entity => entity.use);\n  if (!newWeapon) {\n    return [];\n  }\n\n  // pick up the new weapon\n  entity.weapon = newWeapon;\n  remove(entities, entity => entity.id === newWeapon.id);\n  \n  return [];\n}","import { makeEntity, bomb, flame } from './entities';\nimport { shuffle } from '../math';\n\nconst makeBombBag = (bagProps, bombProps, extraBagProps) => {\n  const weapon = makeEntity({\n    char: 'ó',\n    solid: false,\n    health: 999,\n    capacity: bagProps.capacity || 1,\n    description: 'A standard bomb bag',\n    stats: {\n      radius: bombProps.radius,\n      power: bombProps.power,\n      capacity: bagProps.capacity,\n      // health displayed as timer to users\n      timer: bombProps.health,\n    },\n    use: (entity) => ({\n      type: 'place-bomb',\n      cost: 1,\n      bomb: bomb({...bombProps, position: entity.position})\n    }),\n    ...extraBagProps,\n  });\n\n  return weapon;\n}\n\n// health equates to the number of turns before a bomb explodes\n// capacity is how many bombs can be active at a time\n\nexport const proceduralBombBag = (level, props = {}) => {\n  const points = Math.random() * 3 + level;\n  let numTraits = 1;\n  if (points > 4) {\n    numTraits = 2;\n  } else if (points > 6) {\n    numTraits = 3;\n  }\n\n  const plentifulCapacity = {capacity: 3};\n  const largeRadius = {radius: 2};\n  const veryLargeRadius = {radius: 3};\n  const shortFuse = {health: 2};\n  const longFuse = {health: 5};\n  \n  let bagProps = {};\n  let bombProps = {};\n\n  const availableTraits = shuffle([largeRadius, veryLargeRadius, shortFuse, longFuse]);\n  const traits = availableTraits.slice(0, numTraits);\n  for (const trait of traits) {\n    if (trait === plentifulCapacity) {\n      bagProps = {...bagProps, ...trait}\n    }\n    else {\n      bombProps = {...bombProps, ...trait}\n    }\n  }\n  \n  return makeBombBag(bagProps, bombProps, props);\n}\n\nexport const starterBombBag = (level, props = {}) => {\n  const bagProps = {\n    capacity: 1,\n    description: 'A standard bomb bag',\n  }\n  const bombProps = {\n    radius: Math.ceil(Math.random() * level),\n    health: 3,\n    power: 1,\n  };\n  return makeBombBag(bagProps, bombProps, props);\n}\n\nconst weapons = [proceduralBombBag];\n\nexport const getRandomWeapon = () => {\n  const shuffled = shuffle(weapons);\n  const weapon = shuffled[0];\n  \n  return weapon;\n}","import { MAP_WIDTH, MAP_HEIGHT } from '../constants';\nimport { UP, DOWN, LEFT, RIGHT, add } from '../math';\nimport { isEqual } from 'lodash';\nimport { findPlayer } from '../entity/entities';\n\nexport const getEntitiesAt = (position, entities) =>\n  entities.filter(entity => isEqual(entity.position, position));\n\nexport const getEntitiesAtPositions = (positions, entities) => (\n  positions.map(position => getEntitiesAt(position, entities)).flat()\n);\n\nexport const isAdjacentEdge = ({x, y}) =>\n  x === 0 || x === MAP_WIDTH - 1 || y === 0 || y === MAP_HEIGHT - 1;\n\nexport const getAdjacentPositions = (position) => [\n  add(UP, position), add(DOWN, position), add(LEFT, position), add(RIGHT, position)\n];\n\nexport const getPositionsInDirection = (direction, startPosition, distance) => {\n  const positions = [];\n  while (distance > 0) {\n    const scaledDirection = {x: direction.x * distance, y: direction.y * distance};\n    const offsetPosition = add(startPosition, scaledDirection);\n    positions.push(offsetPosition);\n    distance -= 1;\n  }\n  return positions.reverse();\n};\n\nexport const isCharInDirection = (char, direction, startPosition, distance, entities) => {\n  const positions = getPositionsInDirection(direction, startPosition, distance);\n  for (const position of positions) {\n    const entitiesAtPosition = getEntitiesAt(position, entities);\n    for (const entity of entitiesAtPosition) {\n      if (entity.char === char) {\n        return true;\n      }\n      else if (entity.solid) {\n        return false;\n      }\n    }\n  }\n  return false;\n};\n\nexport const isWalkable = (position, entities) => {\n  const entitiesAtPostion = getEntitiesAt(position, entities);\n\n  // nothing there at all\n  if (entitiesAtPostion.length === 0) {\n    return true;\n  }\n\n  // something solid there\n  if (entitiesAtPostion.some(entity => entity.solid)) {\n    return false;\n  }\n\n  // something there, but it can be walked over\n  return true;\n}","import { MAP_WIDTH, MAP_HEIGHT } from '../constants';\nimport { isAdjacentEdge, getAdjacentPositions } from '../map/map-util';\nimport { empty, staircase, wall, hole } from '../entity/entities';\nimport { getRandomEnemy, ghostSpawner } from '../entity/enemies';\nimport { getRandomWeapon } from '../entity/weapons';\nimport { shuffle } from '../math';\nimport { isEqual } from 'lodash';\n\nexport const makeRoomWithPlayerAndWalls = (player) => {\n  const entities = [player];\n  const emptyEntities = [];\n\n  for (let x = 0; x < MAP_WIDTH; x += 1) {\n    for (let y = 0; y < MAP_HEIGHT; y += 1) {\n      const position = {x, y};\n      // don't place anything where the player is\n      if (isEqual(position, player.position)) {\n        continue;\n      }\n\n      // don't place anything next to where the player is unless it is an edge wall\n      const adjacentPositons = getAdjacentPositions(player.position);\n      const isAdjacentPlayer = adjacentPositons.find(adjPosition => isEqual(position, adjPosition));\n      if (!isAdjacentEdge(position) && isAdjacentPlayer) {\n        continue;\n      }\n\n      if (isAdjacentEdge(position) || (x % 2 === 0 && y % 2 === 0)) {\n        const unbreakableWall = wall({position}, false);\n        entities.push(unbreakableWall);\n      }\n      else {\n        const emptyEntity = empty({position});\n        emptyEntities.push(emptyEntity);\n      }\n    }\n  }\n\n  let shuffledEmptyEntities = shuffle(emptyEntities);\n\n  // need to leave some spots for the player and enemies to fit and walk around\n  const maxThings = emptyEntities.length - 16;\n  // need to have at least enough breakable walls to hide items and stairs\n  const minBreakableWalls = 5;\n  const numBreakableWalls = Math.min(Math.random() * (maxThings / 4) + minBreakableWalls, maxThings);\n  const remainingRandomSpots = maxThings - numBreakableWalls;\n  const numHoles = Math.min(Math.random() * remainingRandomSpots / 2, 0);\n\n  for (let i = 0; i < numBreakableWalls; i += 1) {\n    const position = shuffledEmptyEntities.pop().position;\n     entities.push(wall({position}, true));\n  }\n\n  for (let i = 0; i < numHoles; i += 1) {\n    const position = shuffledEmptyEntities.pop().position;\n     entities.push(hole({position}));\n  }\n\n  return [...entities, ...shuffledEmptyEntities];\n}\n\nconst generateStandardLevel = (level, player) => {\n  const entities = makeRoomWithPlayerAndWalls(player);\n\n  // Add enemies\n  const emptyEntities = entities.filter(entity => entity.char === '·');\n  let shuffledEmptyEntities = shuffle(emptyEntities);\n  const numEnemies = Math.ceil(level * 1.75);\n  for (let i = 0; i < numEnemies; i += 1) {\n    const emptyEntity = shuffledEmptyEntities.pop();\n\n    const enemy = getRandomEnemy(level, {position: emptyEntity.position});\n    entities.push(enemy);\n  }\n\n  // Add ghost spawner (spawns a ghost if the player is taking too long)\n  const ghostsProps = [\n    {health: 75, position: {x: -2, y: -2}},\n    {health: 100, position: {x: MAP_WIDTH + 1, y: -2}},\n    {health: 125, position: {x: MAP_WIDTH + 1, y: MAP_HEIGHT + 1}},\n    {health: 150, position: {x: -2, y: MAP_HEIGHT + 1}},\n  ]\n  for (const props of ghostsProps) {\n    const spawner = ghostSpawner(props);\n    entities.push(spawner); \n  }\n\n  // Add staircase and weapons underneath breakable walls\n  const walls = entities.filter(entity => entity.char === '+')\n  const shuffledWalls = shuffle(walls);\n  const staircaseDown = staircase({\n    position: shuffledWalls.pop().position\n  });\n  entities.push(staircaseDown);\n\n  const weaponFactory = getRandomWeapon();\n  const bagProps = {position: shuffledWalls.pop().position};\n  const weapon = weaponFactory(level + 1, bagProps);\n  entities.push(weapon);\n\n  // finally, remove all the empty entities\n  return entities.filter(entity => entity.char !== '·');\n}\n\nconst generateShop = (level, player) => {\n  const entities = [player];\n  \n  // place outer walls\n  for (let x = 0; x < MAP_WIDTH; x += 1) {\n    for (let y = 0; y < MAP_HEIGHT; y += 1) {\n      const position = {x, y};\n      if (isAdjacentEdge(position)) {\n        const unbreakableWall = wall({position}, false);\n        entities.push(unbreakableWall);\n      }\n    }\n  }\n\n  // place items for sale\n  const positions = [{x: 2, y: 4}, {x: 4, y: 4}, {x: 6, y: 4}];\n  for (const position of positions) {\n    const weaponFactory = getRandomWeapon();\n    const bagProps = {position};\n    const weapon = weaponFactory(level + 1, bagProps);\n    entities.push(weapon);\n  }\n\n  return entities;\n}\n\nexport const generateLevel = (level, player) => {\n  return generateStandardLevel(level, player);\n}","import { findPlayer } from './entity/entities';\nimport { getEntitiesAt } from './map/map-util';\nimport { subtract } from './math';\n\nlet totalTurns = 0;\n\nexport const move = (entity, entities, direction, force = false) => {\n  const newPosition = {\n    x: entity.position.x + direction.x,\n    y: entity.position.y + direction.y\n  }\n\n  // Check if anything is in the way (unless force is true)\n  const upcomingEntities = getEntitiesAt(newPosition, entities);\n  if (!force && upcomingEntities.filter(upcoming => upcoming.solid).length > 0) {\n    return false;\n  }\n\n  entity.position = newPosition\n  return true;\n}\n\nconst placeBomb = (entity, entities, bomb) => {\n  const newBomb = {\n    ...bomb,\n    position: entity.position,\n    owner: entity,\n  }\n\n  entities.push(newBomb);\n}\n\n// **IMPORTANT** Perform actions does a lot of sneaky mutation\n// May mutate any entity (either the supplied entity, but also any entity referenced in an action)\n// May push events into newEvents\nconst performActions = (actions, entity, entities, newEvents) => {\n    while(actions.length > 0) {\n      const action = actions.pop();\n\n      if (entity.actionPoints >= action.cost) {\n        entity.actionPoints -= action.cost\n      } else {\n        continue;\n      }\n\n      if (action.type === 'wait') {\n        entity.status['waiting'] = true;\n      }\n      // similar to attack, but immediately sets target to !alive to avoid triggering explosions\n      if (action.type === 'eat') {\n        action.target.alive = false;\n        action.target.solid = false;\n        newEvents.shake = true;\n      }\n      if (action.type === 'attack') {\n        const { value, target } = action;\n        target.health -= value;\n        entity.status['attacking'] = subtract(target.position, entity.position);\n        newEvents.shake = true;\n      }\n      if (action.type === 'move') {\n        move(entity, entities, action.direction, action.force)\n      }\n      if (action.type === 'spawn') {\n        const { entity } = action;\n        entities.push(entity);\n      }\n      if (action.type === 'place-bomb') {\n        placeBomb(entity, entities, action.bomb)\n      }\n      if (action.type === 'face') {\n        entity.facing = action.direction;\n      }\n      if (action.type === 'change-level') {\n        newEvents.changeLevel = true;\n      }\n    }\n}\n\nconst performTurn = (entity, entities, newEvents) => {\n  // entities with speed 'half' only perform every 2nd turn\n  if (entity.speed === 'half' && totalTurns % 2 === 0) {\n    return\n  }\n\n  // Reset status\n  entity.status = {};\n  entity.actionPoints = entity.actionsPerTurn;\n\n  // Update prev position for each entity\n  entity.prevPosition = {\n    x: entity.position.x,\n    y: entity.position.y\n  };\n\n  // Perform any exisiting actions (likely just from player input)\n  performActions(entity.actions, entity, entities, newEvents);\n\n  // Clear any remaining existing actions for this turn\n  entity.actions = [];\n\n  // Perform any actions generated from behaviours\n  for (const behaviour of entity.behaviours) {\n    const actions = behaviour(entity, entities).reverse();\n    performActions(actions, entity, entities, newEvents);\n  }\n}\n\nexport const performTurns = (entities)=> {\n  const newEvents = {};\n  const player = findPlayer(entities);\n  const everythingElse = entities.filter(entity => entity.id !== player.id);\n\n  for (const entity of [player, ...everythingElse]) {\n    performTurn(entity, entities, newEvents);\n  }\n\n  // Remove anything that is dead\n  for (const entity of entities) {\n    if (entity.health <= 0) {\n      entity.alive = false;\n    }\n  }\n  const remainingEntities = entities.filter(entity => entity.alive);\n\n  totalTurns++;\n\n  return {\n    newEntities: remainingEntities,\n    newEvents\n  };\n}","import React, { useState, useEffect, useCallback } from 'react';\nimport { AppContainer, MapContainer, MenuContainer, Overlay } from './containers';\nimport Map from './map/Map';\nimport { generateLevel } from './map/map-generation';\nimport { player, findPlayer } from './entity/entities';\nimport { performTurns, move } from './turn';\nimport './App.css';\n\nconst NUM_LEVELS = 5;\n\nconst initialLevel = 1;\nconst initialPlayer = player({position: {x: 1, y: 1}});\nconst initialEntities = generateLevel(initialLevel, {...initialPlayer})\n\nfunction App() {\n  const [level, setLevel] = useState(initialLevel);\n  const [entities, setEntities] = useState(initialEntities);\n  const [events, setEvents] = useState({});\n  const lose = !findPlayer(entities);\n  const win = level > NUM_LEVELS;\n\n  const startGame = () => {\n    setLevel(1);\n    setEntities(generateLevel(1, {...initialPlayer}));\n  }\n\n  const backToTitle = useCallback(() => {\n    setLevel(0);\n    setEntities(generateLevel(level, {...initialPlayer}));\n  }, [level]);\n\n  const nextLevel = useCallback(player => {\n    setLevel(level + 1);\n    if (level < NUM_LEVELS) {\n      setEntities(generateLevel(level + 1, player));\n    }\n  }, [level]);\n\n  const keyToDirection = (key) => {\n    const mapping = {\n      ArrowUp: {x: 0, y: -1},\n      ArrowDown: {x: 0, y: 1},\n      ArrowLeft: {x: -1, y: 0},\n      ArrowRight: {x: 1, y: 0}\n    }\n\n    return mapping[key];\n  }\n\n  const handleKeyDown = useCallback(event => {\n    const player = findPlayer(entities);\n    const { key } = event;\n    const direction = keyToDirection(key);\n    const wait = key.toLowerCase() === 'z';\n    const bomb = key.toLowerCase() === 'x';\n    const restart = key.toLowerCase() === 'r'\n\n    if (level === 0 && (bomb || wait)) {\n      startGame();\n      return;\n    }\n\n    if ((win || lose) && (bomb || wait)) {\n      backToTitle();\n      return;\n    }\n\n    if (!player) {\n      return;\n    }\n\n    if (direction) {\n      move(player, entities, direction);\n      // player.actions.push({type: 'move', direction, cost: 1})\n    }\n\n    if (bomb) {\n      const numBombsOut = entities\n        .filter(entity => entity.char === 'b' && entity.owner.char === '@')\n        .length;\n      \n      if (numBombsOut < player.weapon.capacity) {\n        const action = player.weapon.use(player);\n        player.actions.push(action);\n      }\n    }\n\n    if (direction || wait || bomb) {\n      const { newEntities, newEvents } = performTurns(entities);\n\n      // Update state\n      setEntities(newEntities);\n      setEvents(newEvents);\n\n      // Apply certain events now\n      // Others like screenshake will react to props change after setEvents is called\n      if (newEvents.changeLevel) {\n        nextLevel(player);\n      }\n    }\n\n    if (restart) {\n      startGame();\n    }\n  }, [entities, nextLevel, backToTitle, level, lose, win]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n\n  return (\n    <AppContainer>\n      {level === 0 ?\n        // Title screen\n        <MenuContainer>\n          <h1>bomblike</h1>\n          <button onClick={startGame}>play</button>\n        </MenuContainer>\n      :\n        // Main game screen\n        <MapContainer className={'map-container'} shake={events.shake === true}>\n          {(win || lose) && (\n            <Overlay>\n              <h2>{win ? 'Success!' : 'You died'}</h2>\n              <button onClick={backToTitle}>Back to title</button>\n            </Overlay>\n          )}\n          <Map entities={entities.filter(e => e.visible)} />\n        </MapContainer>\n      }\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}